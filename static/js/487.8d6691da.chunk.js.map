{"version":3,"file":"static/js/487.8d6691da.chunk.js","mappings":"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","sources":["components/AnimatedCounter.js","components/VoteButton.js","utils/socket.js","Discussion.js"],"sourcesContent":["// ═══════════════════════════════════════════════════════════════════\r\n// ANIMATED COUNTER COMPONENT\r\n// Numbers that count up when scrolled into view\r\n// ═══════════════════════════════════════════════════════════════════\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useScrollReveal } from '../animations/ScrollReveal';\r\n\r\nconst AnimatedCounter = ({ \r\n  end, \r\n  duration = 2000, \r\n  prefix = '', \r\n  suffix = '',\r\n  className = '' \r\n}) => {\r\n  const [count, setCount] = useState(0);\r\n  const [ref, isVisible] = useScrollReveal({ once: true, threshold: 0.3 });\r\n  const hasAnimated = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (isVisible && !hasAnimated.current) {\r\n      hasAnimated.current = true;\r\n      let startTime;\r\n      let animationFrame;\r\n\r\n      const animate = (currentTime) => {\r\n        if (!startTime) startTime = currentTime;\r\n        const progress = Math.min((currentTime - startTime) / duration, 1);\r\n        \r\n        // Easing function for smooth animation\r\n        const easeOutQuart = 1 - Math.pow(1 - progress, 4);\r\n        setCount(Math.floor(easeOutQuart * end));\r\n\r\n        if (progress < 1) {\r\n          animationFrame = requestAnimationFrame(animate);\r\n        }\r\n      };\r\n\r\n      animationFrame = requestAnimationFrame(animate);\r\n\r\n      return () => {\r\n        if (animationFrame) {\r\n          cancelAnimationFrame(animationFrame);\r\n        }\r\n      };\r\n    }\r\n  }, [isVisible, end, duration]);\r\n\r\n  return (\r\n    <span ref={ref} className={className}>\r\n      {prefix}{count.toLocaleString()}{suffix}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default AnimatedCounter;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './VoteButton.css';\r\nimport config from '../config';\r\n\r\n/**\r\n * VOTE BUTTON COMPONENT\r\n * Reddit-style upvote/downvote with animations\r\n */\r\nfunction VoteButton({ \r\n  itemId, \r\n  itemType, // 'discussion' or 'reply'\r\n  initialScore = 0,\r\n  initialUpvotes = 0,\r\n  initialDownvotes = 0,\r\n  initialUserVote = null,\r\n  userId,\r\n  discussionId = null, // needed for reply votes\r\n  onVoteChange = null,\r\n  disabled = false\r\n}) {\r\n  const [score, setScore] = useState(initialScore);\r\n  const [upvotes, setUpvotes] = useState(initialUpvotes);\r\n  const [downvotes, setDownvotes] = useState(initialDownvotes);\r\n  const [userVote, setUserVote] = useState(initialUserVote); // 'upvote', 'downvote', or null\r\n  const [isVoting, setIsVoting] = useState(false);\r\n  const [animating, setAnimating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setScore(initialScore);\r\n    setUpvotes(initialUpvotes);\r\n    setDownvotes(initialDownvotes);\r\n    setUserVote(initialUserVote);\r\n  }, [initialScore, initialUpvotes, initialDownvotes, initialUserVote]);\r\n\r\n  const handleVote = async (voteType) => {\r\n    if (!userId) {\r\n      alert('Please login to vote');\r\n      return;\r\n    }\r\n\r\n    if (isVoting || disabled) return;\r\n\r\n    setIsVoting(true);\r\n    setAnimating(true);\r\n\r\n    try {\r\n      const endpoint = itemType === 'discussion' \r\n        ? `${config.API_URL}/discussions/${itemId}/vote`\r\n        : `${config.API_URL}/replies/${itemId}/vote`;\r\n\r\n      const body = itemType === 'discussion'\r\n        ? { userId, voteType }\r\n        : { userId, voteType, discussionId };\r\n\r\n      const res = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(body)\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.ok) {\r\n        setScore(data.score);\r\n        setUpvotes(data.upvotes);\r\n        setDownvotes(data.downvotes);\r\n        setUserVote(data.vote);\r\n\r\n        if (onVoteChange) {\r\n          onVoteChange({\r\n            score: data.score,\r\n            upvotes: data.upvotes,\r\n            downvotes: data.downvotes,\r\n            userVote: data.vote\r\n          });\r\n        }\r\n      } else {\r\n        console.error('Vote error:', data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error voting:', error);\r\n    } finally {\r\n      setIsVoting(false);\r\n      setTimeout(() => setAnimating(false), 300);\r\n    }\r\n  };\r\n\r\n  const formatScore = (num) => {\r\n    if (num >= 1000000) {\r\n      return (num / 1000000).toFixed(1) + 'M';\r\n    }\r\n    if (num >= 1000) {\r\n      return (num / 1000).toFixed(1) + 'k';\r\n    }\r\n    return num.toString();\r\n  };\r\n\r\n  const getScoreColor = () => {\r\n    if (score > 0) return 'positive';\r\n    if (score < 0) return 'negative';\r\n    return 'neutral';\r\n  };\r\n\r\n  return (\r\n    <div className={`vote-container ${animating ? 'animating' : ''}`}>\r\n      <button\r\n        className={`vote-btn upvote-btn ${userVote === 'upvote' ? 'active' : ''} ${isVoting ? 'voting' : ''}`}\r\n        onClick={() => handleVote('upvote')}\r\n        disabled={isVoting || disabled}\r\n        title={`Upvote (${upvotes})`}\r\n        aria-label=\"Upvote\"\r\n      >\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"vote-icon\">\r\n          <path d=\"M12 4L4 12h5v8h6v-8h5z\" fill=\"currentColor\" />\r\n        </svg>\r\n      </button>\r\n\r\n      <div className={`vote-score ${getScoreColor()}`}>\r\n        <span className=\"score-number\">{formatScore(score)}</span>\r\n        {Math.abs(score) > 0 && (\r\n          <div className=\"score-breakdown\" title={`${upvotes} upvotes, ${downvotes} downvotes`}>\r\n            <span className=\"breakdown-text\">\r\n              {((upvotes / (upvotes + downvotes || 1)) * 100).toFixed(0)}% upvoted\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <button\r\n        className={`vote-btn downvote-btn ${userVote === 'downvote' ? 'active' : ''} ${isVoting ? 'voting' : ''}`}\r\n        onClick={() => handleVote('downvote')}\r\n        disabled={isVoting || disabled}\r\n        title={`Downvote (${downvotes})`}\r\n        aria-label=\"Downvote\"\r\n      >\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"vote-icon\">\r\n          <path d=\"M12 20L4 12h5V4h6v8h5z\" fill=\"currentColor\" />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VoteButton;\r\n","/**\r\n * AGORA PLATFORM - WEBSOCKET CLIENT UTILITY\r\n * Real-time communication using Socket.IO\r\n */\r\n\r\nimport { io } from 'socket.io-client';\r\nimport config from '../config';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n    this.eventListeners = new Map();\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n  }\r\n\r\n  /**\r\n   * Initialize Socket.IO connection\r\n   */\r\n  connect(userData = null) {\r\n    if (this.socket && this.isConnected) {\r\n      console.log('Socket already connected');\r\n      return this.socket;\r\n    }\r\n\r\n    try {\r\n      this.socket = io(config.API_URL, {\r\n        transports: ['websocket', 'polling'],\r\n        reconnection: true,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        reconnectionAttempts: this.maxReconnectAttempts,\r\n        timeout: 10000\r\n      });\r\n\r\n      this.setupEventHandlers(userData);\r\n      \r\n      return this.socket;\r\n    } catch (error) {\r\n      console.error('Socket connection error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup default event handlers\r\n   */\r\n  setupEventHandlers(userData) {\r\n    this.socket.on('connect', () => {\r\n      console.log('✅ Socket connected:', this.socket.id);\r\n      this.isConnected = true;\r\n      this.reconnectAttempts = 0;\r\n\r\n      // Announce user is online\r\n      if (userData) {\r\n        this.emit('user_online', {\r\n          userId: userData.userId,\r\n          username: userData.username\r\n        });\r\n      }\r\n    });\r\n\r\n    this.socket.on('disconnect', (reason) => {\r\n      console.log('❌ Socket disconnected:', reason);\r\n      this.isConnected = false;\r\n\r\n      if (reason === 'io server disconnect') {\r\n        // Server disconnected, try to reconnect\r\n        this.socket.connect();\r\n      }\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('Connection error:', error);\r\n      this.reconnectAttempts++;\r\n\r\n      if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n        console.error('Max reconnection attempts reached');\r\n        this.disconnect();\r\n      }\r\n    });\r\n\r\n    this.socket.on('reconnect', (attemptNumber) => {\r\n      console.log(`🔄 Reconnected after ${attemptNumber} attempts`);\r\n      this.isConnected = true;\r\n      this.reconnectAttempts = 0;\r\n\r\n      // Re-announce user online after reconnection\r\n      if (userData) {\r\n        this.emit('user_online', {\r\n          userId: userData.userId,\r\n          username: userData.username\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emit an event to the server\r\n   */\r\n  emit(eventName, data) {\r\n    if (!this.socket || !this.isConnected) {\r\n      console.warn(`Cannot emit ${eventName}: Socket not connected`);\r\n      return false;\r\n    }\r\n\r\n    this.socket.emit(eventName, data);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Listen to an event from the server\r\n   */\r\n  on(eventName, callback) {\r\n    if (!this.socket) {\r\n      console.warn(`Cannot listen to ${eventName}: Socket not initialized`);\r\n      return;\r\n    }\r\n\r\n    // Store callback reference for cleanup\r\n    if (!this.eventListeners.has(eventName)) {\r\n      this.eventListeners.set(eventName, []);\r\n    }\r\n    this.eventListeners.get(eventName).push(callback);\r\n\r\n    this.socket.on(eventName, callback);\r\n  }\r\n\r\n  /**\r\n   * Stop listening to an event\r\n   */\r\n  off(eventName, callback) {\r\n    if (!this.socket) return;\r\n\r\n    this.socket.off(eventName, callback);\r\n\r\n    // Remove from tracked listeners\r\n    if (this.eventListeners.has(eventName)) {\r\n      const listeners = this.eventListeners.get(eventName);\r\n      const index = listeners.indexOf(callback);\r\n      if (index > -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Join a discussion room\r\n   */\r\n  joinDiscussion(discussionId, userId, username) {\r\n    return this.emit('join_discussion', {\r\n      discussionId,\r\n      userId,\r\n      username\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Leave a discussion room\r\n   */\r\n  leaveDiscussion(discussionId, username) {\r\n    return this.emit('leave_discussion', {\r\n      discussionId,\r\n      username\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Notify that user is typing\r\n   */\r\n  typingStart(discussionId, username) {\r\n    return this.emit('typing_start', {\r\n      discussionId,\r\n      username\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Notify that user stopped typing\r\n   */\r\n  typingStop(discussionId, username) {\r\n    return this.emit('typing_stop', {\r\n      discussionId,\r\n      username\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Disconnect socket\r\n   */\r\n  disconnect() {\r\n    if (this.socket) {\r\n      // Clean up all event listeners\r\n      for (const [eventName, callbacks] of this.eventListeners.entries()) {\r\n        callbacks.forEach(callback => {\r\n          this.socket.off(eventName, callback);\r\n        });\r\n      }\r\n      this.eventListeners.clear();\r\n\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n      console.log('Socket disconnected and cleaned up');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if socket is connected\r\n   */\r\n  isSocketConnected() {\r\n    return this.socket && this.isConnected;\r\n  }\r\n\r\n  /**\r\n   * Get socket instance (for advanced usage)\r\n   */\r\n  getSocket() {\r\n    return this.socket;\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst socketService = new SocketService();\r\n\r\nexport default socketService;\r\n","import React, { useState, useEffect, useCallback, memo, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './Discussion-Greek.css';\r\nimport Toast from './components/Toast';\r\nimport ScrollProgress from './components/ScrollProgress';\r\nimport AnimatedCounter from './components/AnimatedCounter';\r\nimport VoteButton from './components/VoteButton';\r\nimport config from './config';\r\nimport socketService from './utils/socket';\r\n\r\n// Memoized Reply Card Component\r\nconst ReplyCard = memo(({ reply, index, userId, discussionId }) => (\r\n  <div \r\n    className=\"reply-card scroll-reveal\" \r\n    style={{ animationDelay: `${index * 0.1}s` }}\r\n  >\r\n    <div className=\"reply-vote-section\">\r\n      <VoteButton\r\n        itemId={reply.id}\r\n        itemType=\"reply\"\r\n        initialScore={reply.score || 0}\r\n        initialUpvotes={reply.upvotes || 0}\r\n        initialDownvotes={reply.downvotes || 0}\r\n        initialUserVote={reply.userVote || null}\r\n        userId={userId}\r\n        discussionId={discussionId}\r\n      />\r\n    </div>\r\n    <div className=\"reply-main-content\">\r\n      <div className=\"reply-header\">\r\n        <span className=\"reply-author\">👤 {reply.username}</span>\r\n        <span className=\"reply-date\">{new Date(reply.created_at).toLocaleDateString()}</span>\r\n      </div>\r\n      <p className=\"reply-content\">{reply.content}</p>\r\n    </div>\r\n  </div>\r\n));\r\n\r\nReplyCard.displayName = 'ReplyCard';\r\n\r\nfunction Discussion() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [discussion, setDiscussion] = useState(null);\r\n  const [replies, setReplies] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [toast, setToast] = useState(null);\r\n  const [newReply, setNewReply] = useState('');\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n  const [usersPresent, setUsersPresent] = useState(0);\r\n  const typingTimeoutRef = useRef(null);\r\n  const isTypingRef = useRef(false);\r\n\r\n  const user = JSON.parse(localStorage.getItem('agoraUser') || '{}');\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('agoraUser');\r\n    navigate('/login');\r\n  };\r\n\r\n  const fetchDiscussion = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch(`${config.API_URL}/discussions/${id}`);\r\n      const data = await res.json();\r\n\r\n      if (res.ok) {\r\n        setDiscussion(data.discussion);\r\n        setReplies(data.replies || []);\r\n      } else {\r\n        setToast({ message: 'Discussion not found', type: 'error' });\r\n        setTimeout(() => navigate('/dashboard'), 2000);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching discussion:', error);\r\n      setToast({ message: 'Network error', type: 'error' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [id, navigate]);\r\n\r\n  // Setup WebSocket connection for real-time updates\r\n  useEffect(() => {\r\n    // Connect socket if not already connected\r\n    if (!socketService.isSocketConnected()) {\r\n      socketService.connect(user);\r\n    }\r\n\r\n    // Join discussion room\r\n    if (id && user.userId) {\r\n      socketService.joinDiscussion(id, user.userId, user.username);\r\n    }\r\n\r\n    // Listen for new replies\r\n    const handleNewReply = (data) => {\r\n      if (data.discussionId === parseInt(id)) {\r\n        setReplies(prevReplies => [...prevReplies, data.reply]);\r\n        setToast({ message: `New reply from ${data.reply.username}`, type: 'success' });\r\n        \r\n        // Update reply count in discussion\r\n        setDiscussion(prev => prev ? { ...prev, replies: (prev.replies || 0) + 1 } : prev);\r\n      }\r\n    };\r\n\r\n    // Listen for typing indicators\r\n    const handleUserTyping = (data) => {\r\n      setTypingUsers(data.typingUsers.filter(u => u !== user.username));\r\n    };\r\n\r\n    const handleUserStoppedTyping = (data) => {\r\n      setTypingUsers(data.typingUsers.filter(u => u !== user.username));\r\n    };\r\n\r\n    // Listen for users joining/leaving\r\n    const handleDiscussionJoined = (data) => {\r\n      setUsersPresent(data.usersPresent);\r\n    };\r\n\r\n    const handleUserJoined = (data) => {\r\n      setUsersPresent(data.usersPresent);\r\n      setToast({ message: `${data.username} joined the discussion`, type: 'info' });\r\n    };\r\n\r\n    const handleUserLeft = (data) => {\r\n      setToast({ message: `${data.username} left the discussion`, type: 'info' });\r\n    };\r\n\r\n    // Register event listeners\r\n    socketService.on('new_reply', handleNewReply);\r\n    socketService.on('user_typing', handleUserTyping);\r\n    socketService.on('user_stopped_typing', handleUserStoppedTyping);\r\n    socketService.on('discussion_joined', handleDiscussionJoined);\r\n    socketService.on('user_joined_discussion', handleUserJoined);\r\n    socketService.on('user_left_discussion', handleUserLeft);\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (id && user.username) {\r\n        socketService.leaveDiscussion(id, user.username);\r\n      }\r\n      \r\n      socketService.off('new_reply', handleNewReply);\r\n      socketService.off('user_typing', handleUserTyping);\r\n      socketService.off('user_stopped_typing', handleUserStoppedTyping);\r\n      socketService.off('discussion_joined', handleDiscussionJoined);\r\n      socketService.off('user_joined_discussion', handleUserJoined);\r\n      socketService.off('user_left_discussion', handleUserLeft);\r\n    };\r\n  }, [id, user.userId, user.username]);\r\n\r\n  useEffect(() => {\r\n    fetchDiscussion();\r\n  }, [fetchDiscussion]);\r\n\r\n  const handleReplySubmit = useCallback(async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!newReply.trim()) {\r\n      setToast({ message: 'Reply cannot be empty', type: 'error' });\r\n      return;\r\n    }\r\n\r\n    if (!user.userId) {\r\n      setToast({ message: 'Please login to reply', type: 'error' });\r\n      return;\r\n    }\r\n\r\n    // Stop typing indicator\r\n    if (isTypingRef.current) {\r\n      socketService.typingStop(id, user.username);\r\n      isTypingRef.current = false;\r\n    }\r\n\r\n    setSubmitting(true);\r\n    try {\r\n      const res = await fetch(`${config.API_URL}/replies`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          discussionId: id,\r\n          userId: user.userId,\r\n          username: user.username,\r\n          content: newReply\r\n        })\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.ok) {\r\n        setToast({ message: 'Reply added successfully!', type: 'success' });\r\n        setNewReply('');\r\n        // No need to fetchDiscussion() - WebSocket will handle the update\r\n      } else {\r\n        setToast({ message: data.message || 'Failed to add reply', type: 'error' });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error submitting reply:', error);\r\n      setToast({ message: 'Network error', type: 'error' });\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  }, [id, user.userId, user.username, newReply]);\r\n\r\n  // Handle typing indicator\r\n  const handleReplyChange = useCallback((e) => {\r\n    const value = e.target.value;\r\n    setNewReply(value);\r\n\r\n    // Emit typing start if not already typing\r\n    if (value && !isTypingRef.current) {\r\n      socketService.typingStart(id, user.username);\r\n      isTypingRef.current = true;\r\n    }\r\n\r\n    // Clear existing timeout\r\n    if (typingTimeoutRef.current) {\r\n      clearTimeout(typingTimeoutRef.current);\r\n    }\r\n\r\n    // Set timeout to stop typing after 2 seconds of inactivity\r\n    typingTimeoutRef.current = setTimeout(() => {\r\n      if (isTypingRef.current) {\r\n        socketService.typingStop(id, user.username);\r\n        isTypingRef.current = false;\r\n      }\r\n    }, 2000);\r\n\r\n    // If user cleared the text, stop typing immediately\r\n    if (!value && isTypingRef.current) {\r\n      socketService.typingStop(id, user.username);\r\n      isTypingRef.current = false;\r\n      if (typingTimeoutRef.current) {\r\n        clearTimeout(typingTimeoutRef.current);\r\n      }\r\n    }\r\n  }, [id, user.username]);\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('en-US', { \r\n      month: 'short', \r\n      day: 'numeric', \r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n      <ScrollProgress />\r\n      \r\n      <div className=\"discussion-page\">\r\n        <div className=\"discussion-container\">\r\n          <div className=\"discussion-header-section\">\r\n            <div className=\"discussion-category-tag\">{discussion.category || 'General'}</div>\r\n            <h1 className=\"discussion-title\">{discussion.title}</h1>\r\n            <div className=\"discussion-meta-info\">\r\n              <span className=\"meta-item\">👤 {discussion.username}</span>\r\n              <span className=\"meta-item\">📅 {formatDate(discussion.created_at)}</span>\r\n              <span className=\"meta-item\">👁️ {discussion.views} views</span>\r\n              <span className=\"meta-item\">💬 {replies.length} replies</span>\r\n              {usersPresent > 0 && (\r\n                <span className=\"meta-item live-indicator\" title={`${usersPresent} ${usersPresent === 1 ? 'person' : 'people'} viewing this discussion`}>\r\n                  🟢 {usersPresent} online\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"discussion-content-section\">\r\n            <div className=\"original-post\">\r\n              <div className=\"post-author\">\r\n                <div className=\"author-avatar\">👤</div>\r\n                <div className=\"author-info\">\r\n                  <div className=\"author-name\">{discussion.username}</div>\r\n                  <div className=\"author-date\">{formatDate(discussion.created_at)}</div>\r\n                </div>\r\n              </div>\r\n              <div className=\"post-content\">\r\n                {discussion.content}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Replies Section */}\r\n            <div className=\"replies-section scroll-reveal\">\r\n              <h2 className=\"replies-heading\">\r\n                💬 <AnimatedCounter end={replies.length} /> {replies.length === 1 ? 'Reply' : 'Replies'}\r\n              </h2>\r\n\r\n              {replies.length === 0 ? (\r\n                <div className=\"no-replies\">\r\n                  <p>No replies yet. Be the first to share your thoughts!</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"replies-list\">\r\n                  {replies.map((reply, index) => (\r\n                    <ReplyCard \r\n                      key={index} \r\n                      reply={reply} \r\n                      index={index} \r\n                      userId={user.userId}\r\n                      discussionId={id}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Reply Form */}\r\n            <div className=\"reply-form-section scroll-reveal\">\r\n              <h3>Add Your Reply</h3>\r\n              \r\n              {/* Typing indicators */}\r\n              {typingUsers.length > 0 && (\r\n                <div className=\"typing-indicator\">\r\n                  <span className=\"typing-dots\">\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                  </span>\r\n                  <span className=\"typing-text\">\r\n                    {typingUsers.length === 1 \r\n                      ? `${typingUsers[0]} is typing...`\r\n                      : typingUsers.length === 2\r\n                      ? `${typingUsers[0]} and ${typingUsers[1]} are typing...`\r\n                      : `${typingUsers[0]} and ${typingUsers.length - 1} others are typing...`\r\n                    }\r\n                  </span>\r\n                </div>\r\n              )}\r\n              \r\n              <form onSubmit={handleReplySubmit}>\r\n                <textarea\r\n                  placeholder=\"Share your thoughts on this discussion...\"\r\n                  value={newReply}\r\n                  onChange={handleReplyChange}\r\n                  rows={5}\r\n                  disabled={submitting || loading}\r\n                  minLength={1}\r\n                  maxLength={2000}\r\n                  aria-label=\"Reply content\"\r\n                  aria-required=\"true\"\r\n                />\r\n                <small className=\"char-count\" aria-live=\"polite\">\r\n                  {newReply.length}/2000 characters\r\n                </small>\r\n                <button \r\n                  type=\"submit\" \r\n                  className=\"reply-submit-btn ripple-button\" \r\n                  disabled={submitting || loading}\r\n                  aria-label=\"Post your reply\"\r\n                >\r\n                  {submitting ? 'Posting...' : '📤 Post Reply'}\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Discussion;\r\n"],"names":["_ref","end","duration","prefix","suffix","className","count","setCount","useState","ref","isVisible","useScrollReveal","once","threshold","hasAnimated","useRef","useEffect","current","startTime","animationFrame","animate","currentTime","progress","Math","min","easeOutQuart","pow","floor","requestAnimationFrame","cancelAnimationFrame","_jsxs","children","toLocaleString","itemId","itemType","initialScore","initialUpvotes","initialDownvotes","initialUserVote","userId","discussionId","onVoteChange","disabled","score","setScore","upvotes","setUpvotes","downvotes","setDownvotes","userVote","setUserVote","isVoting","setIsVoting","animating","setAnimating","handleVote","async","endpoint","concat","config","API_URL","body","voteType","res","fetch","method","headers","JSON","stringify","data","json","ok","vote","console","error","message","setTimeout","alert","_jsx","onClick","title","width","height","viewBox","fill","d","num","toFixed","toString","abs","constructor","this","socket","isConnected","eventListeners","Map","reconnectAttempts","maxReconnectAttempts","connect","userData","arguments","length","undefined","log","io","transports","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","timeout","setupEventHandlers","on","id","emit","username","reason","disconnect","attemptNumber","eventName","warn","callback","has","set","get","push","off","listeners","index","indexOf","splice","joinDiscussion","leaveDiscussion","typingStart","typingStop","callbacks","entries","forEach","clear","isSocketConnected","getSocket","ReplyCard","memo","reply","style","animationDelay","VoteButton","Date","created_at","toLocaleDateString","content","displayName","useParams","navigate","useNavigate","discussion","setDiscussion","replies","setReplies","loading","setLoading","toast","setToast","newReply","setNewReply","submitting","setSubmitting","typingUsers","setTypingUsers","usersPresent","setUsersPresent","typingTimeoutRef","isTypingRef","user","parse","localStorage","getItem","fetchDiscussion","useCallback","type","socketService","handleNewReply","parseInt","prevReplies","prev","_objectSpread","handleUserTyping","filter","u","handleUserStoppedTyping","handleDiscussionJoined","handleUserJoined","handleUserLeft","handleReplySubmit","e","preventDefault","trim","handleReplyChange","value","target","clearTimeout","formatDate","dateString","month","day","year","hour","minute","_Fragment","Toast","onClose","ScrollProgress","category","views","AnimatedCounter","map","onSubmit","placeholder","onChange","rows","minLength","maxLength"],"sourceRoot":""}