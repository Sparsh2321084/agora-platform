{"version":3,"file":"static/js/408.790de321.chunk.js","mappings":"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","sources":["Search.js","hooks/useDebounce.js"],"sourcesContent":["import React, { memo, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport { useDebounce } from './hooks/useDebounce';\r\nimport config from './config';\r\nimport './Search.css';\r\n\r\n/**\r\n * SEARCH/EXPLORE PAGE - Find Discussions\r\n * Performance: Debounced search input, virtual scrolling for results\r\n */\r\n\r\nconst Search = memo(() => {\r\n  const navigate = useNavigate();\r\n  const user = JSON.parse(localStorage.getItem('agoraUser') || 'null');\r\n  \r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [category, setCategory] = useState('all');\r\n  const [results, setResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  // AI search removed - unused variables cleaned up\r\n\r\n  // Debounce search query for performance\r\n  const debouncedQuery = useDebounce(searchQuery, 500);\r\n\r\n  useEffect(() => {\r\n    if (!debouncedQuery || debouncedQuery.trim().length < 2) {\r\n      setResults([]);\r\n      return;\r\n    }\r\n\r\n    const searchDiscussions = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        // AI search removed - use only basic keyword search\r\n        const params = new URLSearchParams({\r\n          q: debouncedQuery,\r\n          category: category,\r\n          page: 1,\r\n          limit: 20\r\n        });\r\n\r\n        const response = await fetch(`${config.API_URL}/search?${params}`);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Search failed');\r\n        }\r\n\r\n        const data = await response.json();\r\n        setResults(data.discussions || []);\r\n      } catch (err) {\r\n        console.error('Search error:', err);\r\n        setError('Failed to search discussions. Please try again.');\r\n        setResults([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    searchDiscussions();\r\n  }, [debouncedQuery, category, user?.id]);\r\n\r\n  const categories = [\r\n    { value: 'all', label: 'All Topics', icon: '🌍' },\r\n    { value: 'metaphysics', label: 'Metaphysics', icon: '🌌' },\r\n    { value: 'ethics', label: 'Ethics', icon: '⚖️' },\r\n    { value: 'epistemology', label: 'Epistemology', icon: '🧠' },\r\n    { value: 'aesthetics', label: 'Aesthetics', icon: '🎨' },\r\n    { value: 'logic', label: 'Logic', icon: '🔬' },\r\n    { value: 'stoicism', label: 'Stoicism', icon: '🏛️' }\r\n  ];\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      className=\"search-page\"\r\n    >\r\n      {/* Navigation */}\r\n      {/* Search Content */}\r\n      <div className=\"search-container container-golden\">\r\n        <div className=\"search-header\">\r\n          <h1 className=\"search-title text-epigraphic\">\r\n            🔍 Explore Discussions\r\n            <span className=\"title-greek\">Ἀναζήτηση</span>\r\n          </h1>\r\n          <p className=\"search-subtitle\">\r\n            Search the marketplace of ideas for wisdom\r\n          </p>\r\n        </div>\r\n\r\n        {/* Search Input */}\r\n        <div className=\"search-input-container\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-input\"\r\n            placeholder=\"🔍 Search discussions...\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            autoFocus\r\n          />\r\n          <span className=\"search-icon\">🔍</span>\r\n        </div>\r\n\r\n        {/* AI features removed - metadata display disabled */}\r\n\r\n        {/* Category Filters */}\r\n        <div className=\"category-filters\">\r\n          {categories.map(cat => (\r\n            <button\r\n              key={cat.value}\r\n              className={`category-btn ${category === cat.value ? 'active' : ''}`}\r\n              onClick={() => setCategory(cat.value)}\r\n            >\r\n              <span className=\"category-icon\">{cat.icon}</span>\r\n              {cat.label}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Search Results */}\r\n        <div className=\"search-results\">\r\n          {loading ? (\r\n            <div className=\"loading-state\">\r\n              <div className=\"loading-spinner\"></div>\r\n              <p>Searching the agora...</p>\r\n            </div>\r\n          ) : error ? (\r\n            <div className=\"error-state\">\r\n              <span className=\"error-icon\">⚠️</span>\r\n              <p>{error}</p>\r\n            </div>\r\n          ) : searchQuery && results.length === 0 ? (\r\n            <div className=\"empty-state\">\r\n              <span className=\"empty-icon\">📭</span>\r\n              <p>No discussions found for \"{searchQuery}\"</p>\r\n              <p className=\"empty-hint\">Try different keywords or browse by category</p>\r\n            </div>\r\n          ) : !searchQuery ? (\r\n            <div className=\"empty-state\">\r\n              <span className=\"empty-icon\">🏛️</span>\r\n              <p>Enter a search query to explore discussions</p>\r\n              <p className=\"empty-hint\">Or browse categories above</p>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"results-count\">\r\n                Found {results.length} discussion{results.length !== 1 ? 's' : ''}\r\n              </div>\r\n              <div className=\"results-list\">\r\n                {results.map((result, idx) => (\r\n                  <motion.div\r\n                    key={result.id}\r\n                    className=\"result-card\"\r\n                    initial={{ opacity: 0, y: 20 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    transition={{ delay: idx * 0.1 }}\r\n                    onClick={() => navigate(`/discussion/${result.id}`)}\r\n                  >\r\n                    <div className=\"result-header\">\r\n                      <h3 className=\"result-title\">{result.title}</h3>\r\n                      <span className=\"result-category\">{result.category || 'General'}</span>\r\n                    </div>\r\n                    <p className=\"result-excerpt\">\r\n                      {result.content.length > 200 \r\n                        ? result.content.substring(0, 200) + '...' \r\n                        : result.content}\r\n                    </p>\r\n                    <div className=\"result-footer\">\r\n                      <span className=\"result-author\">👤 {result.username}</span>\r\n                      <span className=\"result-replies\">💬 {result.replies || 0} replies</span>\r\n                      <span className=\"result-views\">👁️ {result.views || 0} views</span>\r\n                    </div>\r\n                  </motion.div>\r\n                ))}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\nSearch.displayName = 'Search';\r\n\r\nexport default Search;\r\n","import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Advanced debouncing hook with configurable delay\r\n * Prevents excessive function calls during rapid user input\r\n * Complexity: O(1) time, O(1) space\r\n */\r\nexport function useDebounce(value, delay = 300) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    // Set up timer to update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cleanup function cancels timer if value changes before delay expires\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\n/**\r\n * Throttle hook - ensures function only executes once per time window\r\n * Better for scroll/resize events\r\n */\r\nexport function useThrottle(value, limit = 100) {\r\n  const [throttledValue, setThrottledValue] = useState(value);\r\n  const [lastRan, setLastRan] = useState(Date.now());\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      if (Date.now() - lastRan >= limit) {\r\n        setThrottledValue(value);\r\n        setLastRan(Date.now());\r\n      }\r\n    }, limit - (Date.now() - lastRan));\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, limit, lastRan]);\r\n\r\n  return throttledValue;\r\n}\r\n"],"names":["Search","memo","navigate","useNavigate","user","JSON","parse","localStorage","getItem","searchQuery","setSearchQuery","useState","category","setCategory","results","setResults","loading","setLoading","error","setError","debouncedQuery","useDebounce","useEffect","trim","length","async","params","URLSearchParams","q","page","limit","response","fetch","concat","config","API_URL","ok","Error","data","json","discussions","err","console","searchDiscussions","id","_jsx","motion","div","initial","opacity","animate","exit","className","children","_jsxs","type","placeholder","value","onChange","e","target","autoFocus","label","icon","map","cat","onClick","_Fragment","result","idx","y","transition","delay","title","content","substring","username","replies","views","displayName","arguments","undefined","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"sourceRoot":""}