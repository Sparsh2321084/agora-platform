{"version":3,"file":"static/js/666.fb40d3fd.chunk.js","mappings":"8IAOO,SAASA,EAAYC,GAAqB,IAAdC,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACzC,MAAOG,EAAgBC,IAAqBC,EAAAA,EAAAA,UAASP,GAcrD,OAZAQ,EAAAA,EAAAA,WAAU,KAER,MAAMC,EAAUC,WAAW,KACzBJ,EAAkBN,IACjBC,GAGH,MAAO,KACLU,aAAaF,KAEd,CAACT,EAAOC,IAEJI,CACT,C,wHCXA,MAAMO,GAAWC,EAAAA,EAAAA,MAAK,KACpB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAMC,IAAWV,EAAAA,EAAAA,UAAS,IAAMW,KAAKC,MAAMC,aAAaC,QAAQ,SAAW,UAC3EC,EAAOC,IAAYhB,EAAAA,EAAAA,UAAS,OAC5BiB,EAAQC,IAAalB,EAAAA,EAAAA,WAAS,IAG9BmB,EAAUC,IAAepB,EAAAA,EAAAA,UAAS,CACvCqB,MAAO,OACPC,oBAAoB,EACpBC,oBAAoB,EACpBC,sBAAsB,EACtBC,gBAAiB,QACjBC,SAAU,KACVC,WAAW,EACXC,mBAAmB,EACnBC,mBAAmB,EACnBC,SAAU,SACVC,QAAS,CACPC,aAAa,EACbC,iBAAiB,EACjBC,cAAc,KAKZC,GAAoB3C,EAAAA,EAAAA,GAAY2B,EAAU,MAGhDlB,EAAAA,EAAAA,WAAU,KACR,IAAKQ,EAEH,YADAF,EAAS,UAIU6B,WACnB,IACE,MAAMC,EAAQxB,aAAaC,QAAQ,YAADwB,OAAa7B,EAAK8B,KAChDF,GACFjB,EAAYT,KAAKC,MAAMyB,GAE3B,CAAE,MAAOG,GACPC,QAAQD,MAAM,0BAA2BA,EAC3C,GAGFE,IACC,CAACjC,EAAMF,KAGVN,EAAAA,EAAAA,WAAU,KACR,IAAKQ,EAAM,OAEU2B,WACnBlB,GAAU,GACV,IACEL,aAAa8B,QAAQ,YAADL,OAAa7B,EAAK8B,IAAM5B,KAAKiC,UAAUT,IAG3DU,SAASC,gBAAgBC,aAAa,aAAcZ,EAAkBd,OACtEwB,SAASC,gBAAgBC,aAAa,iBAAkBZ,EAAkBL,UAE1Ed,EAAS,CAAEgC,QAAS,8BAAqBC,KAAM,WACjD,CAAE,MAAOT,GACPxB,EAAS,CAAEgC,QAAS,iCAA6BC,KAAM,SACzD,CAAC,QACC/B,GAAU,EACZ,GAGFgC,IACC,CAACf,EAAmB1B,IAEvB,MAKM0C,EAAgBA,CAACC,EAAK3D,KAC1B2B,EAAYiC,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE,CAACD,GAAM3D,MAGnC8D,EAAgBA,CAACH,EAAK3D,KAC1B2B,EAAYiC,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAI,IACPtB,SAAOuB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOD,EAAKtB,SAAO,IAAE,CAACqB,GAAM3D,QAIvC,OAAKgB,GAGH+C,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,QAAS,GACpBE,KAAM,CAAEF,QAAS,GACjBG,UAAU,gBAAeC,SAAA,CAExBjD,IAASkD,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAAClB,QAASjC,EAAMiC,QAASC,KAAMlC,EAAMkC,KAAMkB,QAASA,IAAMnD,EAAS,SAInFwC,EAAAA,EAAAA,MAAA,OAAKO,UAAU,sCAAqCC,SAAA,EAClDR,EAAAA,EAAAA,MAAA,OAAKO,UAAU,kBAAiBC,SAAA,EAC9BR,EAAAA,EAAAA,MAAA,MAAIO,UAAU,iCAAgCC,SAAA,CAAC,yBAE7CC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,cAAaC,SAAC,8DAE/B/C,IAAUgD,EAAAA,EAAAA,KAAA,QAAMF,UAAU,mBAAkBC,SAAC,+BAIhDR,EAAAA,EAAAA,MAAA,WAASO,UAAU,mBAAkBC,SAAA,EACnCR,EAAAA,EAAAA,MAAA,MAAIO,UAAU,gBAAeC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,iBAAS,iBAI1CR,EAAAA,EAAAA,MAAA,OAAKO,UAAU,iBAAgBC,SAAA,EAC7BR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,gBAAeC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,WACNR,EAAAA,EAAAA,MAAA,UACE/D,MAAO0B,EAASE,MAChB+C,SAAWC,GAAMlB,EAAc,QAASkB,EAAEC,OAAO7E,OACjDsE,UAAU,iBAAgBC,SAAA,EAE1BC,EAAAA,EAAAA,KAAA,UAAQxE,MAAM,OAAMuE,SAAC,4BACrBC,EAAAA,EAAAA,KAAA,UAAQxE,MAAM,QAAOuE,SAAC,2BACtBC,EAAAA,EAAAA,KAAA,UAAQxE,MAAM,OAAMuE,SAAC,gCAIzBR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,gBAAeC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,eACNR,EAAAA,EAAAA,MAAA,UACE/D,MAAO0B,EAASW,SAChBsC,SAAWC,GAAMlB,EAAc,WAAYkB,EAAEC,OAAO7E,OACpDsE,UAAU,iBAAgBC,SAAA,EAE1BC,EAAAA,EAAAA,KAAA,UAAQxE,MAAM,QAAOuE,SAAC,WACtBC,EAAAA,EAAAA,KAAA,UAAQxE,MAAM,SAAQuE,SAAC,YACvBC,EAAAA,EAAAA,KAAA,UAAQxE,MAAM,QAAOuE,SAAC,iBAI1BR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,+BAA8BC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,WACLsB,QAASpD,EAASQ,UAClByC,SAAWC,GAAMlB,EAAc,YAAakB,EAAEC,OAAOC,YAEvDN,EAAAA,EAAAA,KAAA,QAAAD,SAAM,2EAGRR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,+BAA8BC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,WACLsB,QAASpD,EAASS,kBAClBwC,SAAWC,GAAMlB,EAAc,oBAAqBkB,EAAEC,OAAOC,YAE/DN,EAAAA,EAAAA,KAAA,QAAAD,SAAM,0BAGRR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,+BAA8BC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,WACLsB,QAASpD,EAASU,kBAClBuC,SAAWC,GAAMlB,EAAc,oBAAqBkB,EAAEC,OAAOC,YAE/DN,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iDAMZR,EAAAA,EAAAA,MAAA,WAASO,UAAU,mBAAkBC,SAAA,EACnCR,EAAAA,EAAAA,MAAA,MAAIO,UAAU,gBAAeC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,iBAAS,oBAI1CR,EAAAA,EAAAA,MAAA,OAAKO,UAAU,iBAAgBC,SAAA,EAC7BR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,+BAA8BC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,WACLsB,QAASpD,EAASG,mBAClB8C,SAAWC,GAAMlB,EAAc,qBAAsBkB,EAAEC,OAAOC,YAEhEN,EAAAA,EAAAA,KAAA,QAAAD,SAAM,4BAGRR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,+BAA8BC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,WACLsB,QAASpD,EAASI,mBAClB6C,SAAWC,GAAMlB,EAAc,qBAAsBkB,EAAEC,OAAOC,YAEhEN,EAAAA,EAAAA,KAAA,QAAAD,SAAM,0BAGRR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,+BAA8BC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,WACLsB,QAASpD,EAASK,qBAClB4C,SAAWC,GAAMlB,EAAc,uBAAwBkB,EAAEC,OAAOC,YAElEN,EAAAA,EAAAA,KAAA,QAAAD,SAAM,2BAGRR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,gBAAeC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,sBACNR,EAAAA,EAAAA,MAAA,UACE/D,MAAO0B,EAASM,gBAChB2C,SAAWC,GAAMlB,EAAc,kBAAmBkB,EAAEC,OAAO7E,OAC3DsE,UAAU,iBAAgBC,SAAA,EAE1BC,EAAAA,EAAAA,KAAA,UAAQxE,MAAM,QAAOuE,SAAC,mBACtBC,EAAAA,EAAAA,KAAA,UAAQxE,MAAM,SAAQuE,SAAC,oBACvBC,EAAAA,EAAAA,KAAA,UAAQxE,MAAM,QAAOuE,SAAC,uBAO9BR,EAAAA,EAAAA,MAAA,WAASO,UAAU,mBAAkBC,SAAA,EACnCR,EAAAA,EAAAA,MAAA,MAAIO,UAAU,gBAAeC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,iBAAS,cAI1CR,EAAAA,EAAAA,MAAA,OAAKO,UAAU,iBAAgBC,SAAA,EAC7BR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,+BAA8BC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,WACLsB,QAASpD,EAASY,QAAQC,YAC1BoC,SAAWC,GAAMd,EAAc,cAAec,EAAEC,OAAOC,YAEzDN,EAAAA,EAAAA,KAAA,QAAAD,SAAM,4BAGRR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,+BAA8BC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,WACLsB,QAASpD,EAASY,QAAQE,gBAC1BmC,SAAWC,GAAMd,EAAc,kBAAmBc,EAAEC,OAAOC,YAE7DN,EAAAA,EAAAA,KAAA,QAAAD,SAAM,4BAGRR,EAAAA,EAAAA,MAAA,SAAOO,UAAU,+BAA8BC,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,WACLsB,QAASpD,EAASY,QAAQG,aAC1BkC,SAAWC,GAAMd,EAAc,eAAgBc,EAAEC,OAAOC,YAE1DN,EAAAA,EAAAA,KAAA,QAAAD,SAAM,iCAMZR,EAAAA,EAAAA,MAAA,WAASO,UAAU,+BAA8BC,SAAA,EAC/CR,EAAAA,EAAAA,MAAA,MAAIO,UAAU,gBAAeC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,iBAAS,kBAI1CR,EAAAA,EAAAA,MAAA,OAAKO,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,aAAaS,QAASA,IAAMxD,EAAS,CAAEgC,QAAS,2CAAkCC,KAAM,SAAUe,SAAC,oBAIrHC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,aAAaS,QAASA,IAAMxD,EAAS,CAAEgC,QAAS,2CAAkCC,KAAM,SAAUe,SAAC,oBAIrHC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,sBAAsBS,QAASA,IAAMxD,EAAS,CAAEgC,QAAS,6CAAoCC,KAAM,YAAae,SAAC,+BA5L3H,OAsMpB3D,EAASoE,YAAc,WAEvB,S","sources":["hooks/useDebounce.js","Settings.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Advanced debouncing hook with configurable delay\r\n * Prevents excessive function calls during rapid user input\r\n * Complexity: O(1) time, O(1) space\r\n */\r\nexport function useDebounce(value, delay = 300) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    // Set up timer to update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cleanup function cancels timer if value changes before delay expires\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\n/**\r\n * Throttle hook - ensures function only executes once per time window\r\n * Better for scroll/resize events\r\n */\r\nexport function useThrottle(value, limit = 100) {\r\n  const [throttledValue, setThrottledValue] = useState(value);\r\n  const [lastRan, setLastRan] = useState(Date.now());\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      if (Date.now() - lastRan >= limit) {\r\n        setThrottledValue(value);\r\n        setLastRan(Date.now());\r\n      }\r\n    }, limit - (Date.now() - lastRan));\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, limit, lastRan]);\r\n\r\n  return throttledValue;\r\n}\r\n","import React, { memo, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport { useDebounce } from './hooks/useDebounce';\r\nimport Toast from './components/Toast';\r\nimport './Settings.css';\r\n\r\n/**\r\n * SETTINGS PAGE - User Preferences & Configuration\r\n * Performance: Debounced inputs, IndexedDB storage, React.memo\r\n */\r\n\r\nconst Settings = memo(() => {\r\n  const navigate = useNavigate();\r\n  const [user, setUser] = useState(() => JSON.parse(localStorage.getItem('user') || 'null'));\r\n  const [toast, setToast] = useState(null);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  // Settings state\r\n  const [settings, setSettings] = useState({\r\n    theme: 'dark', // dark, light, auto\r\n    emailNotifications: true,\r\n    replyNotifications: true,\r\n    mentionNotifications: true,\r\n    digestFrequency: 'daily', // daily, weekly, never\r\n    language: 'en',\r\n    showGreek: true,\r\n    animationsEnabled: true,\r\n    accessibilityMode: false,\r\n    fontSize: 'medium', // small, medium, large\r\n    privacy: {\r\n      showProfile: true,\r\n      showDiscussions: true,\r\n      showActivity: true\r\n    }\r\n  });\r\n\r\n  // Debounced settings for auto-save\r\n  const debouncedSettings = useDebounce(settings, 1000);\r\n\r\n  // Load settings from IndexedDB on mount\r\n  useEffect(() => {\r\n    if (!user) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    const loadSettings = async () => {\r\n      try {\r\n        const saved = localStorage.getItem(`settings_${user.id}`);\r\n        if (saved) {\r\n          setSettings(JSON.parse(saved));\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading settings:', error);\r\n      }\r\n    };\r\n\r\n    loadSettings();\r\n  }, [user, navigate]);\r\n\r\n  // Auto-save settings when changed (debounced)\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const saveSettings = async () => {\r\n      setSaving(true);\r\n      try {\r\n        localStorage.setItem(`settings_${user.id}`, JSON.stringify(debouncedSettings));\r\n        \r\n        // Apply settings immediately\r\n        document.documentElement.setAttribute('data-theme', debouncedSettings.theme);\r\n        document.documentElement.setAttribute('data-font-size', debouncedSettings.fontSize);\r\n        \r\n        setToast({ message: '⚙️ Settings saved', type: 'success' });\r\n      } catch (error) {\r\n        setToast({ message: '❌ Failed to save settings', type: 'error' });\r\n      } finally {\r\n        setSaving(false);\r\n      }\r\n    };\r\n\r\n    saveSettings();\r\n  }, [debouncedSettings, user]);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('user');\r\n    navigate('/');\r\n  };\r\n\r\n  const updateSetting = (key, value) => {\r\n    setSettings(prev => ({ ...prev, [key]: value }));\r\n  };\r\n\r\n  const updatePrivacy = (key, value) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      privacy: { ...prev.privacy, [key]: value }\r\n    }));\r\n  };\r\n\r\n  if (!user) return null;\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      className=\"settings-page\"\r\n    >\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n\r\n      {/* Navigation */}\r\n      {/* Settings Content */}\r\n      <div className=\"settings-container container-golden\">\r\n        <div className=\"settings-header\">\r\n          <h1 className=\"settings-title text-epigraphic\">\r\n            ⚙️ Settings\r\n            <span className=\"title-greek\">Ρυθμίσεις</span>\r\n          </h1>\r\n          {saving && <span className=\"saving-indicator\">💾 Saving...</span>}\r\n        </div>\r\n\r\n        {/* Appearance Settings */}\r\n        <section className=\"settings-section\">\r\n          <h2 className=\"section-title\">\r\n            <span className=\"section-icon\">🎨</span>\r\n            Appearance\r\n          </h2>\r\n\r\n          <div className=\"settings-group\">\r\n            <label className=\"setting-label\">\r\n              <span>Theme</span>\r\n              <select \r\n                value={settings.theme}\r\n                onChange={(e) => updateSetting('theme', e.target.value)}\r\n                className=\"setting-select\"\r\n              >\r\n                <option value=\"dark\">Dark (Nighttime Agora)</option>\r\n                <option value=\"light\">Light (Marble Temple)</option>\r\n                <option value=\"auto\">Auto (Follow System)</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label className=\"setting-label\">\r\n              <span>Font Size</span>\r\n              <select \r\n                value={settings.fontSize}\r\n                onChange={(e) => updateSetting('fontSize', e.target.value)}\r\n                className=\"setting-select\"\r\n              >\r\n                <option value=\"small\">Small</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"large\">Large</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label className=\"setting-label checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.showGreek}\r\n                onChange={(e) => updateSetting('showGreek', e.target.checked)}\r\n              />\r\n              <span>Show Greek Text (Ἑλληνικά)</span>\r\n            </label>\r\n\r\n            <label className=\"setting-label checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.animationsEnabled}\r\n                onChange={(e) => updateSetting('animationsEnabled', e.target.checked)}\r\n              />\r\n              <span>Enable Animations</span>\r\n            </label>\r\n\r\n            <label className=\"setting-label checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.accessibilityMode}\r\n                onChange={(e) => updateSetting('accessibilityMode', e.target.checked)}\r\n              />\r\n              <span>Accessibility Mode (High Contrast)</span>\r\n            </label>\r\n          </div>\r\n        </section>\r\n\r\n        {/* Notification Settings */}\r\n        <section className=\"settings-section\">\r\n          <h2 className=\"section-title\">\r\n            <span className=\"section-icon\">🔔</span>\r\n            Notifications\r\n          </h2>\r\n\r\n          <div className=\"settings-group\">\r\n            <label className=\"setting-label checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.emailNotifications}\r\n                onChange={(e) => updateSetting('emailNotifications', e.target.checked)}\r\n              />\r\n              <span>Email Notifications</span>\r\n            </label>\r\n\r\n            <label className=\"setting-label checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.replyNotifications}\r\n                onChange={(e) => updateSetting('replyNotifications', e.target.checked)}\r\n              />\r\n              <span>Notify on Replies</span>\r\n            </label>\r\n\r\n            <label className=\"setting-label checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.mentionNotifications}\r\n                onChange={(e) => updateSetting('mentionNotifications', e.target.checked)}\r\n              />\r\n              <span>Notify on Mentions</span>\r\n            </label>\r\n\r\n            <label className=\"setting-label\">\r\n              <span>Digest Frequency</span>\r\n              <select \r\n                value={settings.digestFrequency}\r\n                onChange={(e) => updateSetting('digestFrequency', e.target.value)}\r\n                className=\"setting-select\"\r\n              >\r\n                <option value=\"daily\">Daily Summary</option>\r\n                <option value=\"weekly\">Weekly Summary</option>\r\n                <option value=\"never\">Never</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n        </section>\r\n\r\n        {/* Privacy Settings */}\r\n        <section className=\"settings-section\">\r\n          <h2 className=\"section-title\">\r\n            <span className=\"section-icon\">🔒</span>\r\n            Privacy\r\n          </h2>\r\n\r\n          <div className=\"settings-group\">\r\n            <label className=\"setting-label checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.privacy.showProfile}\r\n                onChange={(e) => updatePrivacy('showProfile', e.target.checked)}\r\n              />\r\n              <span>Make Profile Public</span>\r\n            </label>\r\n\r\n            <label className=\"setting-label checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.privacy.showDiscussions}\r\n                onChange={(e) => updatePrivacy('showDiscussions', e.target.checked)}\r\n              />\r\n              <span>Show My Discussions</span>\r\n            </label>\r\n\r\n            <label className=\"setting-label checkbox-label\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={settings.privacy.showActivity}\r\n                onChange={(e) => updatePrivacy('showActivity', e.target.checked)}\r\n              />\r\n              <span>Show Activity Feed</span>\r\n            </label>\r\n          </div>\r\n        </section>\r\n\r\n        {/* Account Actions */}\r\n        <section className=\"settings-section danger-zone\">\r\n          <h2 className=\"section-title\">\r\n            <span className=\"section-icon\">⚠️</span>\r\n            Danger Zone\r\n          </h2>\r\n\r\n          <div className=\"settings-group\">\r\n            <button className=\"danger-btn\" onClick={() => setToast({ message: '🔄 Password reset coming soon!', type: 'info' })}>\r\n              Reset Password\r\n            </button>\r\n            \r\n            <button className=\"danger-btn\" onClick={() => setToast({ message: '📧 Export feature coming soon!', type: 'info' })}>\r\n              Export My Data\r\n            </button>\r\n            \r\n            <button className=\"danger-btn critical\" onClick={() => setToast({ message: '⚠️ Account deletion coming soon!', type: 'warning' })}>\r\n              Delete Account\r\n            </button>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\nSettings.displayName = 'Settings';\r\n\r\nexport default Settings;\r\n"],"names":["useDebounce","value","delay","arguments","length","undefined","debouncedValue","setDebouncedValue","useState","useEffect","handler","setTimeout","clearTimeout","Settings","memo","navigate","useNavigate","user","setUser","JSON","parse","localStorage","getItem","toast","setToast","saving","setSaving","settings","setSettings","theme","emailNotifications","replyNotifications","mentionNotifications","digestFrequency","language","showGreek","animationsEnabled","accessibilityMode","fontSize","privacy","showProfile","showDiscussions","showActivity","debouncedSettings","async","saved","concat","id","error","console","loadSettings","setItem","stringify","document","documentElement","setAttribute","message","type","saveSettings","updateSetting","key","prev","_objectSpread","updatePrivacy","_jsxs","motion","div","initial","opacity","animate","exit","className","children","_jsx","Toast","onClose","onChange","e","target","checked","onClick","displayName"],"sourceRoot":""}