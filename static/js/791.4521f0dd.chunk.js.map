{"version":3,"file":"static/js/791.4521f0dd.chunk.js","mappings":"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","sources":["components/AnimatedCounter.js","utils/indexedDB.js","utils/cacheStrategies.js","animations/pageTransitions.js","Dashboard.js","hooks/useDebounce.js","components/VoteButton.js"],"sourcesContent":["// ═══════════════════════════════════════════════════════════════════\r\n// ANIMATED COUNTER COMPONENT\r\n// Numbers that count up when scrolled into view\r\n// ═══════════════════════════════════════════════════════════════════\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useScrollReveal } from '../animations/ScrollReveal';\r\n\r\nconst AnimatedCounter = ({ \r\n  end, \r\n  duration = 2000, \r\n  prefix = '', \r\n  suffix = '',\r\n  className = '' \r\n}) => {\r\n  const [count, setCount] = useState(0);\r\n  const [ref, isVisible] = useScrollReveal({ once: true, threshold: 0.3 });\r\n  const hasAnimated = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (isVisible && !hasAnimated.current) {\r\n      hasAnimated.current = true;\r\n      let startTime;\r\n      let animationFrame;\r\n\r\n      const animate = (currentTime) => {\r\n        if (!startTime) startTime = currentTime;\r\n        const progress = Math.min((currentTime - startTime) / duration, 1);\r\n        \r\n        // Easing function for smooth animation\r\n        const easeOutQuart = 1 - Math.pow(1 - progress, 4);\r\n        setCount(Math.floor(easeOutQuart * end));\r\n\r\n        if (progress < 1) {\r\n          animationFrame = requestAnimationFrame(animate);\r\n        }\r\n      };\r\n\r\n      animationFrame = requestAnimationFrame(animate);\r\n\r\n      return () => {\r\n        if (animationFrame) {\r\n          cancelAnimationFrame(animationFrame);\r\n        }\r\n      };\r\n    }\r\n  }, [isVisible, end, duration]);\r\n\r\n  return (\r\n    <span ref={ref} className={className}>\r\n      {prefix}{count.toLocaleString()}{suffix}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default AnimatedCounter;\r\n","/**\r\n * IndexedDB Manager - Advanced client-side storage\r\n * Provides persistent storage with better performance than localStorage\r\n * Supports large datasets, structured queries, and transactions\r\n * \r\n * Advantages over localStorage:\r\n * - No 5MB limit (can store gigabytes)\r\n * - Asynchronous (non-blocking)\r\n * - Structured data with indexes\r\n * - Transaction support (ACID properties)\r\n */\r\n\r\nconst DB_NAME = 'AgoraPlatform';\r\nconst DB_VERSION = 1;\r\n\r\nclass IndexedDBManager {\r\n  constructor() {\r\n    this.db = null;\r\n    this.initPromise = this.init();\r\n  }\r\n\r\n  /**\r\n   * Initialize database with schema\r\n   * Creates object stores (tables) and indexes\r\n   */\r\n  async init() {\r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = () => {\r\n        this.db = request.result;\r\n        resolve(this.db);\r\n      };\r\n\r\n      // Schema migration\r\n      request.onupgradeneeded = (event) => {\r\n        const db = event.target.result;\r\n\r\n        // Discussions store with indexes\r\n        if (!db.objectStoreNames.contains('discussions')) {\r\n          const discussionStore = db.createObjectStore('discussions', { keyPath: 'id' });\r\n          discussionStore.createIndex('category', 'category', { unique: false });\r\n          discussionStore.createIndex('username', 'username', { unique: false });\r\n          discussionStore.createIndex('created_at', 'created_at', { unique: false });\r\n          discussionStore.createIndex('views', 'views', { unique: false });\r\n        }\r\n\r\n        // Replies store\r\n        if (!db.objectStoreNames.contains('replies')) {\r\n          const replyStore = db.createObjectStore('replies', { keyPath: 'id', autoIncrement: true });\r\n          replyStore.createIndex('discussionId', 'discussionId', { unique: false });\r\n          replyStore.createIndex('username', 'username', { unique: false });\r\n        }\r\n\r\n        // User profile cache\r\n        if (!db.objectStoreNames.contains('userProfile')) {\r\n          db.createObjectStore('userProfile', { keyPath: 'userId' });\r\n        }\r\n\r\n        // Offline queue for failed requests\r\n        if (!db.objectStoreNames.contains('offlineQueue')) {\r\n          const queueStore = db.createObjectStore('offlineQueue', { keyPath: 'id', autoIncrement: true });\r\n          queueStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generic get operation with index support\r\n   * Complexity: O(log n) with B-tree index\r\n   */\r\n  async get(storeName, key) {\r\n    await this.initPromise;\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction(storeName, 'readonly');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = store.get(key);\r\n\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Batch get all items from store\r\n   * Returns cursor for efficient iteration\r\n   */\r\n  async getAll(storeName, limit = 100) {\r\n    await this.initPromise;\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction(storeName, 'readonly');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = store.getAll(null, limit);\r\n\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Indexed query for fast lookups\r\n   * Example: getByIndex('discussions', 'category', 'Ethics')\r\n   */\r\n  async getByIndex(storeName, indexName, value) {\r\n    await this.initPromise;\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction(storeName, 'readonly');\r\n      const store = transaction.objectStore(storeName);\r\n      const index = store.index(indexName);\r\n      const request = index.getAll(value);\r\n\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Put operation with upsert semantics\r\n   */\r\n  async put(storeName, data) {\r\n    await this.initPromise;\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction(storeName, 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = store.put(data);\r\n\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Batch insert with transaction\r\n   * Ensures atomicity - all succeed or all fail\r\n   */\r\n  async putBatch(storeName, dataArray) {\r\n    await this.initPromise;\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction(storeName, 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n\r\n      dataArray.forEach(data => store.put(data));\r\n\r\n      transaction.oncomplete = () => resolve();\r\n      transaction.onerror = () => reject(transaction.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Delete operation\r\n   */\r\n  async delete(storeName, key) {\r\n    await this.initPromise;\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction(storeName, 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = store.delete(key);\r\n\r\n      request.onsuccess = () => resolve();\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear entire store\r\n   */\r\n  async clear(storeName) {\r\n    await this.initPromise;\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction(storeName, 'readwrite');\r\n      const store = transaction.objectStore(storeName);\r\n      const request = store.clear();\r\n\r\n      request.onsuccess = () => resolve();\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add to offline queue for background sync\r\n   */\r\n  async queueOfflineAction(action) {\r\n    await this.put('offlineQueue', {\r\n      ...action,\r\n      timestamp: Date.now(),\r\n      retries: 0\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get pending offline actions\r\n   */\r\n  async getOfflineQueue() {\r\n    return this.getAll('offlineQueue');\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nconst dbManager = new IndexedDBManager();\r\nexport default dbManager;\r\n","import dbManager from './indexedDB';\r\n\r\n/**\r\n * Advanced caching strategies for optimized data fetching\r\n * Implements various cache patterns from HTTP/2 and service workers\r\n */\r\n\r\n/**\r\n * Stale-While-Revalidate Pattern\r\n * Returns cached data immediately, then fetches fresh data in background\r\n * Best for frequently changing data where stale data is acceptable\r\n */\r\nexport async function staleWhileRevalidate(key, fetchFn, maxAge = 60000) {\r\n  const cached = await dbManager.get('discussions', key);\r\n  \r\n  // Return cached data immediately if available\r\n  if (cached && Date.now() - cached.timestamp < maxAge) {\r\n    // Revalidate in background\r\n    fetchFn().then(freshData => {\r\n      dbManager.put('discussions', {\r\n        ...freshData,\r\n        id: key,\r\n        timestamp: Date.now()\r\n      });\r\n    }).catch(console.error);\r\n    \r\n    return cached;\r\n  }\r\n  \r\n  // No cache or expired, fetch fresh\r\n  const freshData = await fetchFn();\r\n  await dbManager.put('discussions', {\r\n    ...freshData,\r\n    id: key,\r\n    timestamp: Date.now()\r\n  });\r\n  \r\n  return freshData;\r\n}\r\n\r\n/**\r\n * Cache-First Pattern\r\n * Only fetch from network if cache miss\r\n * Best for static or rarely changing data\r\n */\r\nexport async function cacheFirst(key, fetchFn) {\r\n  const cached = await dbManager.get('discussions', key);\r\n  \r\n  if (cached) {\r\n    return cached;\r\n  }\r\n  \r\n  const freshData = await fetchFn();\r\n  await dbManager.put('discussions', {\r\n    ...freshData,\r\n    id: key,\r\n    timestamp: Date.now()\r\n  });\r\n  \r\n  return freshData;\r\n}\r\n\r\n/**\r\n * Network-First Pattern\r\n * Always try network first, fallback to cache\r\n * Best for real-time data\r\n */\r\nexport async function networkFirst(key, fetchFn) {\r\n  try {\r\n    const freshData = await fetchFn();\r\n    await dbManager.put('discussions', {\r\n      ...freshData,\r\n      id: key,\r\n      timestamp: Date.now()\r\n    });\r\n    return freshData;\r\n  } catch (error) {\r\n    console.warn('Network failed, falling back to cache:', error);\r\n    const cached = await dbManager.get('discussions', key);\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Optimistic UI Updates\r\n * Update UI immediately, then sync with server\r\n * Rollback on failure\r\n */\r\nexport async function optimisticUpdate(key, updateFn, rollbackData) {\r\n  // Apply update immediately\r\n  const optimisticData = updateFn(rollbackData);\r\n  await dbManager.put('discussions', {\r\n    ...optimisticData,\r\n    id: key,\r\n    timestamp: Date.now()\r\n  });\r\n  \r\n  try {\r\n    // Sync with server\r\n    const serverData = await fetch(`/api/discussions/${key}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(optimisticData)\r\n    }).then(r => r.json());\r\n    \r\n    // Update with server response\r\n    await dbManager.put('discussions', {\r\n      ...serverData,\r\n      id: key,\r\n      timestamp: Date.now()\r\n    });\r\n    \r\n    return serverData;\r\n  } catch (error) {\r\n    // Rollback on failure\r\n    console.error('Optimistic update failed, rolling back:', error);\r\n    await dbManager.put('discussions', {\r\n      ...rollbackData,\r\n      id: key,\r\n      timestamp: Date.now()\r\n    });\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Background Sync Queue\r\n * Queues failed requests for retry when online\r\n */\r\nexport async function queueForBackgroundSync(action) {\r\n  await dbManager.queueOfflineAction(action);\r\n  \r\n  // Retry immediately if online\r\n  if (navigator.onLine) {\r\n    await processOfflineQueue();\r\n  }\r\n}\r\n\r\nexport async function processOfflineQueue() {\r\n  const queue = await dbManager.getOfflineQueue();\r\n  \r\n  for (const action of queue) {\r\n    try {\r\n      await fetch(action.url, {\r\n        method: action.method,\r\n        headers: action.headers,\r\n        body: action.body\r\n      });\r\n      \r\n      // Remove from queue on success\r\n      await dbManager.delete('offlineQueue', action.id);\r\n    } catch (error) {\r\n      console.error('Failed to process queued action:', error);\r\n      // Will retry later\r\n    }\r\n  }\r\n}\r\n\r\n// Listen for online event to process queue\r\nif (typeof window !== 'undefined') {\r\n  window.addEventListener('online', processOfflineQueue);\r\n}\r\n","// ═══════════════════════════════════════════════════════════════════\r\n// PAGE TRANSITION ANIMATIONS\r\n// Smooth transitions between pages for enhanced user experience\r\n// ═══════════════════════════════════════════════════════════════════\r\n\r\nexport const pageVariants = {\r\n  initial: {\r\n    opacity: 0,\r\n    y: 20,\r\n    scale: 0.98\r\n  },\r\n  enter: {\r\n    opacity: 1,\r\n    y: 0,\r\n    scale: 1,\r\n    transition: {\r\n      duration: 0.6,\r\n      ease: [0.43, 0.13, 0.23, 0.96]\r\n    }\r\n  },\r\n  exit: {\r\n    opacity: 0,\r\n    y: -20,\r\n    scale: 0.98,\r\n    transition: {\r\n      duration: 0.4,\r\n      ease: [0.43, 0.13, 0.23, 0.96]\r\n    }\r\n  }\r\n};\r\n\r\nexport const fadeInUp = {\r\n  initial: {\r\n    opacity: 0,\r\n    y: 30\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    y: 0,\r\n    transition: {\r\n      duration: 0.5,\r\n      ease: 'easeOut'\r\n    }\r\n  }\r\n};\r\n\r\nexport const staggerContainer = {\r\n  animate: {\r\n    transition: {\r\n      staggerChildren: 0.1\r\n    }\r\n  }\r\n};\r\n\r\nexport const slideInLeft = {\r\n  initial: {\r\n    opacity: 0,\r\n    x: -50\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    x: 0,\r\n    transition: {\r\n      duration: 0.5,\r\n      ease: 'easeOut'\r\n    }\r\n  }\r\n};\r\n\r\nexport const slideInRight = {\r\n  initial: {\r\n    opacity: 0,\r\n    x: 50\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    x: 0,\r\n    transition: {\r\n      duration: 0.5,\r\n      ease: 'easeOut'\r\n    }\r\n  }\r\n};\r\n\r\nexport const scaleIn = {\r\n  initial: {\r\n    opacity: 0,\r\n    scale: 0.8\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    transition: {\r\n      duration: 0.4,\r\n      ease: 'easeOut'\r\n    }\r\n  }\r\n};\r\n\r\nexport const rotateIn = {\r\n  initial: {\r\n    opacity: 0,\r\n    rotate: -10,\r\n    scale: 0.9\r\n  },\r\n  animate: {\r\n    opacity: 1,\r\n    rotate: 0,\r\n    scale: 1,\r\n    transition: {\r\n      duration: 0.6,\r\n      ease: 'easeOut'\r\n    }\r\n  }\r\n};\r\n","import React, { useState, useEffect, useCallback, useMemo, memo } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport './Dashboard-Greek.css';\r\nimport Toast from './components/Toast';\r\nimport ScrollProgress from './components/ScrollProgress';\r\nimport AnimatedCounter from './components/AnimatedCounter';\r\nimport VoteButton from './components/VoteButton';\r\nimport config from './config';\r\nimport { useDebounce } from './hooks/useDebounce';\r\nimport authManager from './utils/authManager';\r\nimport { staleWhileRevalidate } from './utils/cacheStrategies';\r\nimport { fadeInUp } from './animations/pageTransitions';\r\n\r\n// Memoized Discussion Card Component for better performance\r\nconst DiscussionCard = memo(({ disc, index, onNavigate, userId }) => {\r\n  const handleClick = useCallback((e) => {\r\n    // Don't navigate if clicking on vote buttons\r\n    if (e.target.closest('.vote-container')) {\r\n      return;\r\n    }\r\n    onNavigate(`/discussion/${disc.id}`);\r\n  }, [disc.id, onNavigate]);\r\n\r\n  const handleJoinClick = useCallback((e) => {\r\n    e.stopPropagation();\r\n    onNavigate(`/discussion/${disc.id}`);\r\n  }, [disc.id, onNavigate]);\r\n\r\n  return (\r\n    <div \r\n      className=\"discussion-card scroll-reveal hover-lift\" \r\n      style={{ animationDelay: `${index * 0.1}s` }}\r\n      onClick={handleClick}\r\n    >\r\n      <div className=\"discussion-card-content\">\r\n        <div className=\"discussion-vote-section\">\r\n          <VoteButton\r\n            itemId={disc.id}\r\n            itemType=\"discussion\"\r\n            initialScore={disc.score || 0}\r\n            initialUpvotes={disc.upvotes || 0}\r\n            initialDownvotes={disc.downvotes || 0}\r\n            initialUserVote={disc.userVote || null}\r\n            userId={userId}\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"discussion-main-content\">\r\n          <div className=\"discussion-category-badge\">{disc.category || 'General'}</div>\r\n          <div className=\"tooltip-trigger\">\r\n            <h4>{disc.title}</h4>\r\n            <span className=\"tooltip-content\">{disc.content?.substring(0, 150)}...</span>\r\n          </div>\r\n          <p>{disc.content?.substring(0, 100)}...</p>\r\n          <div className=\"discussion-meta\">\r\n            <span>👤 {disc.username}</span>\r\n            <span>💬 {disc.replies || 0}</span>\r\n            <span>👁️ {disc.views || 0}</span>\r\n          </div>\r\n          <button className=\"join-btn ripple-button\" onClick={handleJoinClick}>\r\n            Join Discussion\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nDiscussionCard.displayName = 'DiscussionCard';\r\n\r\n// Skeleton Loader Component\r\nconst SkeletonCard = memo(({ index }) => (\r\n  <div className=\"discussion-card skeleton\" style={{ animationDelay: `${index * 0.1}s` }}>\r\n    <div className=\"skeleton\" style={{ width: '120px', height: '24px', marginBottom: '1rem' }}></div>\r\n    <div className=\"skeleton\" style={{ width: '80%', height: '28px', marginBottom: '0.5rem' }}></div>\r\n    <div className=\"skeleton\" style={{ width: '100%', height: '60px', marginBottom: '1rem' }}></div>\r\n    <div style={{ display: 'flex', gap: '1rem', marginBottom: '1rem' }}>\r\n      <div className=\"skeleton\" style={{ width: '80px', height: '20px' }}></div>\r\n      <div className=\"skeleton\" style={{ width: '60px', height: '20px' }}></div>\r\n      <div className=\"skeleton\" style={{ width: '70px', height: '20px' }}></div>\r\n    </div>\r\n    <div className=\"skeleton\" style={{ width: '140px', height: '40px' }}></div>\r\n  </div>\r\n));\r\n\r\nSkeletonCard.displayName = 'SkeletonCard';\r\n\r\nfunction Dashboard() {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [discussions, setDiscussions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [toast, setToast] = useState(null);\r\n  const [showCreateModal, setShowCreateModal] = useState(false);\r\n  const [newDiscussion, setNewDiscussion] = useState({\r\n    title: '',\r\n    content: '',\r\n    category: ''\r\n  });\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedFilter, setSelectedFilter] = useState('All');\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    limit: 20,\r\n    total: 0,\r\n    totalPages: 1\r\n  });\r\n\r\n  // Advanced: Debounced search to prevent excessive filtering\r\n  const debouncedSearch = useDebounce(searchQuery, 300);\r\n  \r\n  // Check authentication status on mount\r\n  useEffect(() => {\r\n    if (!authManager.isAuthenticated()) {\r\n      // Check if we have user data in localStorage (fallback for backward compatibility)\r\n      const storedUser = localStorage.getItem('agoraUser');\r\n      if (!storedUser) {\r\n        navigate('/login');\r\n        return;\r\n      }\r\n    }\r\n  }, [navigate]);\r\n  \r\n  // Get user data from navigation state or localStorage\r\n  const defaultUser = {\r\n    userId: localStorage.getItem('agoraUserId') || 'AGORA-0001',\r\n    username: 'Sparsh',\r\n    tagline: 'Seeking truth through dialogue',\r\n    belief: 'Agnostic',\r\n    categories: ['Ethics', 'Free Will', 'Consciousness']\r\n  };\r\n\r\n  const user = location.state?.userData || JSON.parse(localStorage.getItem('agoraUser') || JSON.stringify(defaultUser));\r\n\r\n  // Memoized categories list\r\n  const categories = useMemo(() => ['All', 'Ethics', 'Free Will', 'Consciousness', 'Epistemology', 'Politics', 'Metaphysics'], []);\r\n\r\n  // Optimized fetch with caching (stale-while-revalidate pattern)\r\n  const fetchDiscussions = useCallback(async (page = 1, category = null) => {\r\n    setLoading(true);\r\n    try {\r\n      const cacheKey = `discussions_${page}_${category || 'all'}`;\r\n      \r\n      // Use stale-while-revalidate for better UX\r\n      const data = await staleWhileRevalidate(\r\n        cacheKey,\r\n        async () => {\r\n          let url = `${config.API_URL}/discussions?page=${page}&limit=20`;\r\n          if (category && category !== 'All') {\r\n            url += `&category=${encodeURIComponent(category)}`;\r\n          }\r\n          \r\n          const res = await fetch(url);\r\n          return res.json();\r\n        },\r\n        30000 // 30 seconds cache\r\n      );\r\n      \r\n      if (data.discussions) {\r\n        setDiscussions(data.discussions || []);\r\n        if (data.pagination) {\r\n          setPagination(data.pagination);\r\n        }\r\n      } else {\r\n        setToast({ message: 'Failed to load discussions', type: 'error' });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching discussions:', error);\r\n      setToast({ message: 'Network error. Using sample data.', type: 'error' });\r\n      // Use sample data as fallback\r\n      setDiscussions([\r\n        {\r\n          id: 1,\r\n          title: 'Is Free Will an Illusion?',\r\n          content: 'Join the debate on determinism vs. free will.',\r\n          category: 'Free Will',\r\n          username: 'Philosopher',\r\n          replies: 12,\r\n          views: 45\r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'Ethics in Modern Society',\r\n          content: 'Share your thoughts on evolving moral standards.',\r\n          category: 'Ethics',\r\n          username: 'Thinker',\r\n          replies: 8,\r\n          views: 32\r\n        }\r\n      ]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Fetch discussions on mount\r\n  useEffect(() => {\r\n    fetchDiscussions();\r\n  }, [fetchDiscussions]);\r\n\r\n  const handleCreateDiscussion = useCallback(async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!newDiscussion.title || !newDiscussion.content) {\r\n      setToast({ message: 'Please fill in all fields', type: 'error' });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const res = await fetch(`${config.API_URL}/discussions`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          userId: user.userId,\r\n          username: user.username,\r\n          title: newDiscussion.title,\r\n          content: newDiscussion.content,\r\n          category: newDiscussion.category || 'General'\r\n        })\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.ok) {\r\n        setToast({ message: 'Discussion created successfully!', type: 'success' });\r\n        setShowCreateModal(false);\r\n        setNewDiscussion({ title: '', content: '', category: '' });\r\n        fetchDiscussions(); // Refresh discussions\r\n      } else {\r\n        setToast({ message: data.message || 'Failed to create discussion', type: 'error' });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating discussion:', error);\r\n      setToast({ message: 'Network error. Please try again.', type: 'error' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [newDiscussion, user.username, user.userId, fetchDiscussions]);\r\n\r\n  const handleLogout = useCallback(async () => {\r\n    await authManager.logout();\r\n    navigate('/login');\r\n  }, [navigate]);\r\n\r\n  // Memoized filtered discussions with debounced search for performance\r\n  const filteredDiscussions = useMemo(() => {\r\n    return discussions.filter(disc => {\r\n      const matchesSearch = disc.title?.toLowerCase().includes(debouncedSearch.toLowerCase()) ||\r\n                           disc.content?.toLowerCase().includes(debouncedSearch.toLowerCase());\r\n      const matchesCategory = selectedFilter === 'All' || disc.category === selectedFilter;\r\n      return matchesSearch && matchesCategory;\r\n    });\r\n  }, [discussions, debouncedSearch, selectedFilter]);\r\n\r\n  return (\r\n    <motion.div {...fadeInUp}>\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n      <ScrollProgress />\r\n      \r\n      <div className=\"dashboard-bg\">\r\n        <main className=\"dashboard-main\">\r\n          <section className=\"dashboard-welcome\">\r\n            <h1>Welcome, <span className=\"username-highlight\">{user.username}</span></h1>\r\n            <p className=\"tagline\">{user.tagline}</p>\r\n          </section>\r\n\r\n          <section className=\"dashboard-info scroll-reveal\">\r\n            <div className=\"info-card\">\r\n              <h3>Your Profile</h3>\r\n              <p><strong>ID:</strong> {user.userId}</p>\r\n              <p><strong>Belief:</strong> {user.belief || 'Not specified'}</p>\r\n            </div>\r\n            <div className=\"info-card\">\r\n              <h3>Your Interests</h3>\r\n              <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\r\n                {(user.categories || []).map((cat, index) => (\r\n                  <li key={index} className=\"category-pill\">{cat}</li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n            <div className=\"info-card scroll-reveal\">\r\n              <h3>Stats</h3>\r\n              <p><strong>Discussions:</strong> <AnimatedCounter end={discussions.length} /></p>\r\n              <p><strong>Active:</strong> Today</p>\r\n            </div>\r\n          </section>\r\n\r\n          <section className=\"dashboard-discussion\">\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1.5rem', flexWrap: 'wrap', gap: '1rem' }}>\r\n              <h2>Latest Discussions</h2>\r\n              <button className=\"create-discussion-btn\" onClick={() => setShowCreateModal(true)}>\r\n                ➕ Start Discussion\r\n              </button>\r\n            </div>\r\n\r\n            {/* Search and Filter */}\r\n            <div className=\"search-filter-section\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"search-input\"\r\n                placeholder=\"🔍 Search discussions...\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                aria-label=\"Search discussions\"\r\n              />\r\n              <select \r\n                className=\"filter-select glow-on-hover\"\r\n                value={selectedFilter}\r\n                onChange={(e) => {\r\n                  setSelectedFilter(e.target.value);\r\n                  fetchDiscussions(1, e.target.value);\r\n                }}\r\n                aria-label=\"Filter by category\"\r\n              >\r\n                <option value=\"All\">All Categories</option>\r\n                {categories.map((cat, idx) => (\r\n                  <option key={idx} value={cat}>{cat}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            \r\n            {loading ? (\r\n              <div className=\"discussion-list\">\r\n                {[1, 2, 3].map((n) => <SkeletonCard key={n} index={n} />)}\r\n              </div>\r\n            ) : filteredDiscussions.length === 0 ? (\r\n              <div className=\"no-discussions\">\r\n                <p>{searchQuery || selectedFilter !== 'All' ? 'No discussions match your search.' : 'No discussions yet. Be the first to start one!'}</p>\r\n              </div>\r\n            ) : (\r\n              <>\r\n                <div className=\"discussion-list\">\r\n                  {filteredDiscussions.map((disc, index) => (\r\n                    <DiscussionCard \r\n                      key={disc.id} \r\n                      disc={disc} \r\n                      index={index} \r\n                      onNavigate={navigate}\r\n                      userId={user.userId}\r\n                    />\r\n                  ))}\r\n                </div>\r\n                \r\n                {/* Pagination Controls */}\r\n                {pagination.totalPages > 1 && (\r\n                  <div className=\"pagination-controls\" style={{ \r\n                    display: 'flex', \r\n                    justifyContent: 'center', \r\n                    gap: '1rem', \r\n                    marginTop: '2rem',\r\n                    alignItems: 'center'\r\n                  }}>\r\n                    <button \r\n                      className={pagination.page === 1 ? '' : 'ripple-button'}\r\n                      onClick={() => fetchDiscussions(pagination.page - 1, selectedFilter)}\r\n                      disabled={pagination.page === 1}\r\n                      style={{\r\n                        padding: '0.5rem 1rem',\r\n                        background: pagination.page === 1 ? '#ccc' : 'var(--primary-color)',\r\n                        color: '#fff',\r\n                        border: 'none',\r\n                        borderRadius: '4px',\r\n                        cursor: pagination.page === 1 ? 'not-allowed' : 'pointer'\r\n                      }}\r\n                      aria-label=\"Previous page\"\r\n                    >\r\n                      ← Previous\r\n                    </button>\r\n                    <span style={{ color: 'var(--text-color)' }}>\r\n                      Page {pagination.page} of {pagination.totalPages}\r\n                    </span>\r\n                    <button \r\n                      className={pagination.page === pagination.totalPages ? '' : 'ripple-button'}\r\n                      onClick={() => fetchDiscussions(pagination.page + 1, selectedFilter)}\r\n                      disabled={pagination.page === pagination.totalPages}\r\n                      style={{\r\n                        padding: '0.5rem 1rem',\r\n                        background: pagination.page === pagination.totalPages ? '#ccc' : 'var(--primary-color)',\r\n                        color: '#fff',\r\n                        border: 'none',\r\n                        borderRadius: '4px',\r\n                        cursor: pagination.page === pagination.totalPages ? 'not-allowed' : 'pointer'\r\n                      }}\r\n                      aria-label=\"Next page\"\r\n                    >\r\n                      Next →\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </section>\r\n        </main>\r\n\r\n        {/* Create Discussion Modal */}\r\n        {showCreateModal && (\r\n          <div className=\"modal-overlay\" onClick={() => setShowCreateModal(false)}>\r\n            <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n              <div className=\"modal-header\">\r\n                <h2>🏛️ Start a New Discussion</h2>\r\n                <button className=\"modal-close\" onClick={() => setShowCreateModal(false)}>✕</button>\r\n              </div>\r\n              \r\n              <form onSubmit={handleCreateDiscussion}>\r\n                <div className=\"form-group\">\r\n                  <label>Discussion Title</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    value={newDiscussion.title}\r\n                    onChange={(e) => setNewDiscussion({ ...newDiscussion, title: e.target.value })}\r\n                    required\r\n                    minLength={5}\r\n                    maxLength={200}\r\n                    aria-label=\"Discussion title\"\r\n                    aria-required=\"true\"\r\n                  />\r\n                  <small className=\"char-count\" aria-live=\"polite\">\r\n                    {newDiscussion.title.length}/200 characters\r\n                  </small>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Category</label>\r\n                  <select\r\n                    value={newDiscussion.category}\r\n                    onChange={(e) => setNewDiscussion({ ...newDiscussion, category: e.target.value })}\r\n                  >\r\n                    <option value=\"\">Select a category...</option>\r\n                    {categories.map((cat, idx) => (\r\n                      <option key={idx} value={cat}>{cat}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Content</label>\r\n                  <textarea\r\n                    placeholder=\"Share your thoughts...\"\r\n                    value={newDiscussion.content}\r\n                    onChange={(e) => setNewDiscussion({ ...newDiscussion, content: e.target.value })}\r\n                    rows={6}\r\n                    required\r\n                    minLength={10}\r\n                    maxLength={5000}\r\n                    aria-label=\"Discussion content\"\r\n                    aria-required=\"true\"\r\n                  />\r\n                  <small className=\"char-count\" aria-live=\"polite\">\r\n                    {newDiscussion.content.length}/5000 characters\r\n                  </small>\r\n                </div>\r\n\r\n                <div className=\"modal-actions\">\r\n                  <button type=\"button\" className=\"cancel-btn\" onClick={() => setShowCreateModal(false)}>\r\n                    Cancel\r\n                  </button>\r\n                  <button type=\"submit\" className=\"submit-btn\">\r\n                    Create Discussion\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;","import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Advanced debouncing hook with configurable delay\r\n * Prevents excessive function calls during rapid user input\r\n * Complexity: O(1) time, O(1) space\r\n */\r\nexport function useDebounce(value, delay = 300) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    // Set up timer to update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cleanup function cancels timer if value changes before delay expires\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\n/**\r\n * Throttle hook - ensures function only executes once per time window\r\n * Better for scroll/resize events\r\n */\r\nexport function useThrottle(value, limit = 100) {\r\n  const [throttledValue, setThrottledValue] = useState(value);\r\n  const [lastRan, setLastRan] = useState(Date.now());\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      if (Date.now() - lastRan >= limit) {\r\n        setThrottledValue(value);\r\n        setLastRan(Date.now());\r\n      }\r\n    }, limit - (Date.now() - lastRan));\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, limit, lastRan]);\r\n\r\n  return throttledValue;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport './VoteButton.css';\r\nimport config from '../config';\r\n\r\n/**\r\n * VOTE BUTTON COMPONENT\r\n * Reddit-style upvote/downvote with animations\r\n */\r\nfunction VoteButton({ \r\n  itemId, \r\n  itemType, // 'discussion' or 'reply'\r\n  initialScore = 0,\r\n  initialUpvotes = 0,\r\n  initialDownvotes = 0,\r\n  initialUserVote = null,\r\n  userId,\r\n  discussionId = null, // needed for reply votes\r\n  onVoteChange = null,\r\n  disabled = false\r\n}) {\r\n  const [score, setScore] = useState(initialScore);\r\n  const [upvotes, setUpvotes] = useState(initialUpvotes);\r\n  const [downvotes, setDownvotes] = useState(initialDownvotes);\r\n  const [userVote, setUserVote] = useState(initialUserVote); // 'upvote', 'downvote', or null\r\n  const [isVoting, setIsVoting] = useState(false);\r\n  const [animating, setAnimating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setScore(initialScore);\r\n    setUpvotes(initialUpvotes);\r\n    setDownvotes(initialDownvotes);\r\n    setUserVote(initialUserVote);\r\n  }, [initialScore, initialUpvotes, initialDownvotes, initialUserVote]);\r\n\r\n  const handleVote = async (voteType) => {\r\n    if (!userId) {\r\n      alert('Please login to vote');\r\n      return;\r\n    }\r\n\r\n    if (isVoting || disabled) return;\r\n\r\n    setIsVoting(true);\r\n    setAnimating(true);\r\n\r\n    try {\r\n      const endpoint = itemType === 'discussion' \r\n        ? `${config.API_URL}/discussions/${itemId}/vote`\r\n        : `${config.API_URL}/replies/${itemId}/vote`;\r\n\r\n      const body = itemType === 'discussion'\r\n        ? { userId, voteType }\r\n        : { userId, voteType, discussionId };\r\n\r\n      const res = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(body)\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.ok) {\r\n        setScore(data.score);\r\n        setUpvotes(data.upvotes);\r\n        setDownvotes(data.downvotes);\r\n        setUserVote(data.vote);\r\n\r\n        if (onVoteChange) {\r\n          onVoteChange({\r\n            score: data.score,\r\n            upvotes: data.upvotes,\r\n            downvotes: data.downvotes,\r\n            userVote: data.vote\r\n          });\r\n        }\r\n      } else {\r\n        console.error('Vote error:', data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error voting:', error);\r\n    } finally {\r\n      setIsVoting(false);\r\n      setTimeout(() => setAnimating(false), 300);\r\n    }\r\n  };\r\n\r\n  const formatScore = (num) => {\r\n    if (num >= 1000000) {\r\n      return (num / 1000000).toFixed(1) + 'M';\r\n    }\r\n    if (num >= 1000) {\r\n      return (num / 1000).toFixed(1) + 'k';\r\n    }\r\n    return num.toString();\r\n  };\r\n\r\n  const getScoreColor = () => {\r\n    if (score > 0) return 'positive';\r\n    if (score < 0) return 'negative';\r\n    return 'neutral';\r\n  };\r\n\r\n  return (\r\n    <div className={`vote-container ${animating ? 'animating' : ''}`}>\r\n      <button\r\n        className={`vote-btn upvote-btn ${userVote === 'upvote' ? 'active' : ''} ${isVoting ? 'voting' : ''}`}\r\n        onClick={() => handleVote('upvote')}\r\n        disabled={isVoting || disabled}\r\n        title={`Upvote (${upvotes})`}\r\n        aria-label=\"Upvote\"\r\n      >\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"vote-icon\">\r\n          <path d=\"M12 4L4 12h5v8h6v-8h5z\" fill=\"currentColor\" />\r\n        </svg>\r\n      </button>\r\n\r\n      <div className={`vote-score ${getScoreColor()}`}>\r\n        <span className=\"score-number\">{formatScore(score)}</span>\r\n        {Math.abs(score) > 0 && (\r\n          <div className=\"score-breakdown\" title={`${upvotes} upvotes, ${downvotes} downvotes`}>\r\n            <span className=\"breakdown-text\">\r\n              {((upvotes / (upvotes + downvotes || 1)) * 100).toFixed(0)}% upvoted\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <button\r\n        className={`vote-btn downvote-btn ${userVote === 'downvote' ? 'active' : ''} ${isVoting ? 'voting' : ''}`}\r\n        onClick={() => handleVote('downvote')}\r\n        disabled={isVoting || disabled}\r\n        title={`Downvote (${downvotes})`}\r\n        aria-label=\"Downvote\"\r\n      >\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"vote-icon\">\r\n          <path d=\"M12 20L4 12h5V4h6v8h5z\" fill=\"currentColor\" />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VoteButton;\r\n"],"names":["_ref","end","duration","prefix","suffix","className","count","setCount","useState","ref","isVisible","useScrollReveal","once","threshold","hasAnimated","useRef","useEffect","current","startTime","animationFrame","animate","currentTime","progress","Math","min","easeOutQuart","pow","floor","requestAnimationFrame","cancelAnimationFrame","_jsxs","children","toLocaleString","constructor","this","db","initPromise","init","Promise","resolve","reject","request","indexedDB","open","onerror","error","onsuccess","result","onupgradeneeded","event","target","objectStoreNames","contains","discussionStore","createObjectStore","keyPath","createIndex","unique","replyStore","autoIncrement","get","storeName","key","transaction","objectStore","getAll","limit","arguments","length","undefined","getByIndex","indexName","value","index","put","data","putBatch","dataArray","store","forEach","oncomplete","delete","clear","queueOfflineAction","action","_objectSpread","timestamp","Date","now","retries","getOfflineQueue","async","processOfflineQueue","queue","dbManager","fetch","url","method","headers","body","id","console","window","addEventListener","fadeInUp","initial","opacity","y","transition","ease","DiscussionCard","memo","_disc$content","_disc$content2","disc","onNavigate","userId","handleClick","useCallback","e","closest","concat","handleJoinClick","stopPropagation","_jsx","style","animationDelay","onClick","VoteButton","itemId","itemType","initialScore","score","initialUpvotes","upvotes","initialDownvotes","downvotes","initialUserVote","userVote","category","title","content","substring","username","replies","views","displayName","SkeletonCard","_ref2","width","height","marginBottom","display","gap","_location$state","location","useLocation","navigate","useNavigate","discussions","setDiscussions","loading","setLoading","toast","setToast","showCreateModal","setShowCreateModal","newDiscussion","setNewDiscussion","searchQuery","setSearchQuery","selectedFilter","setSelectedFilter","pagination","setPagination","page","total","totalPages","debouncedSearch","useDebounce","authManager","isAuthenticated","localStorage","getItem","defaultUser","tagline","belief","categories","user","state","userData","JSON","parse","stringify","useMemo","fetchDiscussions","cacheKey","fetchFn","maxAge","cached","then","freshData","catch","staleWhileRevalidate","config","API_URL","encodeURIComponent","json","message","type","handleCreateDiscussion","preventDefault","res","ok","filteredDiscussions","logout","filter","_disc$title","_disc$content3","matchesSearch","toLowerCase","includes","matchesCategory","motion","div","Toast","onClose","ScrollProgress","listStyle","padding","margin","map","cat","AnimatedCounter","justifyContent","alignItems","flexWrap","placeholder","onChange","idx","n","_Fragment","marginTop","disabled","background","color","border","borderRadius","cursor","onSubmit","required","minLength","maxLength","rows","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","discussionId","onVoteChange","setScore","setUpvotes","setDownvotes","setUserVote","isVoting","setIsVoting","animating","setAnimating","handleVote","endpoint","voteType","vote","alert","viewBox","fill","d","num","toFixed","toString","abs"],"sourceRoot":""}