{"version":3,"file":"static/js/74.7007e651.chunk.js","mappings":"2MA0QA,QAnQA,WACE,MAAOA,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,KAClCK,EAAQC,IAAaN,EAAAA,EAAAA,UAAS,KAC9BO,EAAQC,IAAaR,EAAAA,EAAAA,UAAS,KAC9BS,EAAcC,IAAmBV,EAAAA,EAAAA,WAAS,IAC1CW,EAASC,IAAcZ,EAAAA,EAAAA,WAAS,IAChCa,EAAOC,IAAYd,EAAAA,EAAAA,UAAS,OAC5Be,EAAaC,IAAkBhB,EAAAA,EAAAA,UAAS,KACxCiB,EAAkBC,IAAuBlB,EAAAA,EAAAA,UAAS,IACnDmB,GAAWC,EAAAA,EAAAA,MAqEjB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGZ,IAAWa,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,QAAQ,0CAC5Bb,IAASW,EAAAA,EAAAA,KAACG,EAAAA,EAAK,CAACD,QAASb,EAAMa,QAASE,KAAMf,EAAMe,KAAMC,QAASA,IAAMf,EAAS,SAEnFO,EAAAA,EAAAA,MAAA,OAAKS,UAAU,qBAAoBP,SAAA,EAEjCF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,gBAAgBC,MAAM,kCAAiCR,SAAA,EACpEC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,qBACfN,EAAAA,EAAAA,KAAA,OAAKM,UAAU,kBACfN,EAAAA,EAAAA,KAAA,OAAKM,UAAU,oBAEjBT,EAAAA,EAAAA,MAAA,OAAKS,UAAU,iBAAiBC,MAAM,gCAA+BR,SAAA,EACnEC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,qBACfN,EAAAA,EAAAA,KAAA,OAAKM,UAAU,kBACfN,EAAAA,EAAAA,KAAA,OAAKM,UAAU,mBAGhBf,GACCM,EAAAA,EAAAA,MAAA,OAAKS,UAAU,eAAcP,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,eAAcP,SAAC,YAC9BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBACJC,EAAAA,EAAAA,KAAA,KAAGM,UAAU,iBAAgBP,SAAC,2BAC9BF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,mBAAkBP,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,QAAMM,UAAU,WAAUP,SAAER,KAC5BS,EAAAA,EAAAA,KAAA,UACEM,UAAU,WACVE,QAASA,KAAMC,OAlEJC,EAkEoBnB,EAjE3CoB,UAAUC,UAAUC,UAAUH,QAC9BpB,EAAS,CAAEY,QAAS,gCAAiCE,KAAM,YAFpCM,OAmEXN,KAAK,SAAQL,SACd,0BAIHC,EAAAA,EAAAA,KAAA,KAAGM,UAAU,YAAWP,SAAC,gEAG3BF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,gBAAeP,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,kBAAiBP,SAAA,EAE9BC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,qBAAoBP,UACjCF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,iBAAgBP,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,gBAAeP,SAAC,YAC/BC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,0BACfN,EAAAA,EAAAA,KAAA,OAAKM,UAAU,0BACfN,EAAAA,EAAAA,KAAA,OAAKM,UAAU,+BAGnBN,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,KAAGM,UAAU,WAAUP,SAAC,kDACxBC,EAAAA,EAAAA,KAAA,KAAGM,UAAU,gBAAeP,SAAC,gGAC7BC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,iBAAgBP,SAAC,+CAGlCF,EAAAA,EAAAA,MAAA,QAAMiB,SAvFKC,UACnBC,EAAEC,iBACF7B,GAAW,GACXE,EAAS,MAET,IACE,MAAM4B,QAAYC,MAAM,GAADC,OAAIC,EAAAA,EAAOC,QAAO,aAAa,CACpDC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAErD,WAAUG,UAASE,eAGtCiD,QAAaV,EAAIW,OAEnBX,EAAIY,IACNtC,EAAeoC,EAAKG,QACpBzC,EAAS,CAAEY,QAAQ,6BAADkB,OAA+BQ,EAAKG,QAAU3B,KAAM,YAGtE4B,aAAaC,QAAQ,cAAeL,EAAKG,QAEzCG,WAAW,KACTvC,EAAS,UAAW,CAAEwC,MAAO,CAAEJ,OAAQH,EAAKG,OAAQzD,eACnD,MAEHgB,EAAS,CAAEY,QAAS0B,EAAK1B,SAAW,sBAAuBE,KAAM,SAErE,CAAE,MAAOgC,GACP9C,EAAS,CAAEY,QAAS,mCAAoCE,KAAM,SAChE,CAAC,QACChB,GAAW,EACb,GAwDqCW,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,aAAYP,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,eACPC,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLiC,YAAY,0CACZC,MAAOhE,EACPiE,SAAUvB,GAAKzC,EAAYyC,EAAEwB,OAAOF,OACpCG,UAAQ,EACRC,UAAW,KAEb1C,EAAAA,EAAAA,KAAA,SAAOM,UAAU,cAAaP,SAAC,mDAGjCF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,aAAYP,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,kBACPC,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLiC,YAAY,qDACZC,MAAO7D,EACP8D,SAAUvB,GAAKtC,EAAWsC,EAAEwB,OAAOF,OACnCG,UAAQ,KAEVzC,EAAAA,EAAAA,KAAA,SAAOM,UAAU,cAAaP,SAAC,0DAGjCF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,aAAYP,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,mBACPC,EAAAA,EAAAA,KAAA,SACEI,KAAK,WACLiC,YAAY,0CACZC,MAAO3D,EACP4D,SAtIcvB,IAC5B,MAAM2B,EAAO3B,EAAEwB,OAAOF,MACtB1D,EAAY+D,GAEVjD,EADEiD,EArByBA,KAE7B,GAAIA,EAAKC,OAAS,EAAG,MAAO,OAE5B,MAKMC,EAAc,CALC,QAAQC,KAAKH,GACb,QAAQG,KAAKH,GAChB,QAAQG,KAAKH,GACZ,uCAAuCG,KAAKH,IAESI,OAAOC,SAASJ,OAExF,OAAIC,EAAc,EAAU,OACxBF,EAAKC,QAAU,GAAqB,IAAhBC,GAAqBF,EAAKC,OAAS,GAAW,SAClED,EAAKC,QAAU,IAAsB,IAAhBC,EAA0B,SAE5C,UAOeI,CAAsBN,GAEtB,KAiIRF,UAAQ,EACRC,UAAW,EACXQ,UAAW,IACX,mBAAiB,0BAElBzD,IACCI,EAAAA,EAAAA,MAAA,OAAKS,UAAS,qBAAAc,OAAuB3B,GAAmBM,SAAA,EACtDC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,kBACfT,EAAAA,EAAAA,MAAA,QAAMS,UAAU,gBAAeP,SAAA,CACP,SAArBN,GAA+B,gDACV,WAArBA,GAAiC,uCACZ,WAArBA,GAAiC,oDAIxCO,EAAAA,EAAAA,KAAA,SAAOmD,GAAG,wBAAwB7C,UAAU,cAAaP,SAAC,uFAK5DF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,aAAYP,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,0BACPF,EAAAA,EAAAA,MAAA,UACEyC,MAAOzD,EACP0D,SAAUvB,GAAKlC,EAAUkC,EAAEwB,OAAOF,OAClCG,UAAQ,EAAA1C,SAAA,EAERC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,GAAEvC,SAAC,oCACjBC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,QAAOvC,SAAC,oDACtBC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,YAAWvC,SAAC,yDAC1BC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,UAASvC,SAAC,qDACxBC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,YAAWvC,SAAC,+CAC1BC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,eAAcvC,SAAC,wDAC7BC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,QAAOvC,SAAC,kDACtBC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,WAAUvC,SAAC,wCACzBC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,iBAAgBvC,SAAC,8DAEjCC,EAAAA,EAAAA,KAAA,SAAOM,UAAU,cAAaP,SAAC,0DAGjCF,EAAAA,EAAAA,MAAA,OAAKS,UAAU,aAAYP,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,oBACPF,EAAAA,EAAAA,MAAA,UACEyC,MAAOvD,EACPwD,SAAUvB,GAAKhC,EAAUgC,EAAEwB,OAAOF,OAClCG,UAAQ,EAAA1C,SAAA,EAERC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,GAAEvC,SAAC,oCACjBC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,SAAQvC,SAAC,2FACvBC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,UAASvC,SAAC,4FACxBC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,aAAYvC,SAAC,0GAC3BC,EAAAA,EAAAA,KAAA,UAAQsC,MAAM,UAASvC,SAAC,oHAE1BC,EAAAA,EAAAA,KAAA,SAAOM,UAAU,cAAaP,SAAC,sDAIjCC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,iBAAgBP,UAC7BF,EAAAA,EAAAA,MAAA,SAAOS,UAAU,aAAYP,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SACEI,KAAK,WACLE,UAAU,gBACV8C,QAASnE,EACTsD,SAAUvB,GAAK9B,EAAgB8B,EAAEwB,OAAOY,SACxCX,UAAQ,KAEVzC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,YAAWP,SAAC,sMAO/BC,EAAAA,EAAAA,KAAA,UAAQI,KAAK,SAASE,UAAU,aAAa+C,SAAUlE,IAAYF,EAAac,SAC7EZ,EAAU,uBAAyB,yBAGtCU,EAAAA,EAAAA,MAAA,OAAKS,UAAU,kBAAiBP,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,KAAGS,UAAU,cAAaP,SAAA,CAAC,uBACNC,EAAAA,EAAAA,KAAA,KAAGsD,KAAK,SAAQvD,SAAC,4BAEtCC,EAAAA,EAAAA,KAAA,KAAGM,UAAU,cAAaP,UACxBC,EAAAA,EAAAA,KAAA,KAAGsD,KAAK,IAAGvD,SAAC,iDAS9B,C","sources":["Register.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Register.css';\r\nimport Loading from './components/Loading';\r\nimport Toast from './components/Toast';\r\nimport config from './config';\r\n\r\nfunction Register() {\r\n  const [username, setUsername] = useState('');\r\n  const [tagline, setTagline] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [belief, setBelief] = useState('');\r\n  const [virtue, setVirtue] = useState('');\r\n  const [oathAccepted, setOathAccepted] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [toast, setToast] = useState(null);\r\n  const [generatedId, setGeneratedId] = useState('');\r\n  const [passwordStrength, setPasswordStrength] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const checkPasswordStrength = (pass) => {\r\n    // Must match backend requirements: 8+ chars with uppercase, lowercase, number, special\r\n    if (pass.length < 8) return 'weak';\r\n    \r\n    const hasUpperCase = /[A-Z]/.test(pass);\r\n    const hasLowerCase = /[a-z]/.test(pass);\r\n    const hasNumber = /[0-9]/.test(pass);\r\n    const hasSpecial = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?]/.test(pass);\r\n    \r\n    const criteriaMet = [hasUpperCase, hasLowerCase, hasNumber, hasSpecial].filter(Boolean).length;\r\n    \r\n    if (criteriaMet < 4) return 'weak';\r\n    if (pass.length >= 8 && criteriaMet === 4 && pass.length < 12) return 'medium';\r\n    if (pass.length >= 12 && criteriaMet === 4) return 'strong';\r\n    \r\n    return 'medium';\r\n  };\r\n\r\n  const handlePasswordChange = (e) => {\r\n    const pass = e.target.value;\r\n    setPassword(pass);\r\n    if (pass) {\r\n      setPasswordStrength(checkPasswordStrength(pass));\r\n    } else {\r\n      setPasswordStrength('');\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = (text) => {\r\n    navigator.clipboard.writeText(text);\r\n    setToast({ message: 'Agora ID copied to clipboard!', type: 'success' });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setToast(null);\r\n\r\n    try {\r\n      const res = await fetch(`${config.API_URL}/register`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, tagline, password })\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.ok) {\r\n        setGeneratedId(data.userId);\r\n        setToast({ message: `Welcome! Your Agora ID is ${data.userId}`, type: 'success' });\r\n        \r\n        // Save userId to localStorage for auto-login\r\n        localStorage.setItem('agoraUserId', data.userId);\r\n        \r\n        setTimeout(() => {\r\n          navigate('/belief', { state: { userId: data.userId, username } });\r\n        }, 2000);\r\n      } else {\r\n        setToast({ message: data.message || 'Registration failed', type: 'error' });\r\n      }\r\n    } catch (error) {\r\n      setToast({ message: 'Network error. Please try again.', type: 'error' });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loading message=\"The Oracle is consulting the Fates...\" />}\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n      \r\n      <div className=\"register-container\">\r\n        {/* Greek Fire Columns - Eternal Flames of Initiation */}\r\n        <div className=\"caryatid-left\" title=\"Eternal Flame of New Beginnings\">\r\n          <div className=\"caryatid-figure\"></div>\r\n          <div className=\"column-shaft\"></div>\r\n          <div className=\"column-base\"></div>\r\n        </div>\r\n        <div className=\"caryatid-right\" title=\"Sacred Fire of Transformation\">\r\n          <div className=\"caryatid-figure\"></div>\r\n          <div className=\"column-shaft\"></div>\r\n          <div className=\"column-base\"></div>\r\n        </div>\r\n\r\n        {generatedId ? (\r\n          <div className=\"success-card\">\r\n            <div className=\"success-icon\">✓</div>\r\n            <h3>Oracle's Blessing</h3>\r\n            <p className=\"agora-id-label\">Your Sacred Identity:</p>\r\n            <div className=\"agora-id-display\">\r\n              <span className=\"agora-id\">{generatedId}</span>\r\n              <button \r\n                className=\"copy-btn\" \r\n                onClick={() => copyToClipboard(generatedId)}\r\n                type=\"button\"\r\n              >\r\n                📋 Copy\r\n              </button>\r\n            </div>\r\n            <p className=\"info-text\">Guard this sacred ID - it is your key to the threshold!</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"register-card\">\r\n            <div className=\"register-header\">\r\n              {/* Omphalos - Sacred Navel Stone */}\r\n              <div className=\"omphalos-container\">\r\n                <div className=\"omphalos-stone\">\r\n                  <div className=\"omphalos-icon\">✨</div>\r\n                  <div className=\"omphalos-ring ring-1\"></div>\r\n                  <div className=\"omphalos-ring ring-2\"></div>\r\n                  <div className=\"omphalos-ring ring-3\"></div>\r\n                </div>\r\n              </div>\r\n              <h2>Rite of Entry</h2>\r\n              <p className=\"subtitle\">Carve Your Name into the Marble of Discourse</p>\r\n              <p className=\"delphic-maxim\">« ΜΗΔΕΝ ΑΓΑΝ » — Nothing in Excess</p>\r\n              <div className=\"step-indicator\">Sacred Initiation • Step I of III</div>\r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label>Your Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"As you wish to be known in the Agora...\"\r\n                  value={username}\r\n                  onChange={e => setUsername(e.target.value)}\r\n                  required\r\n                  minLength={3}\r\n                />\r\n                <small className=\"helper-text\">Your identity etched in stone for eternity</small>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Sacred Motto</label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"A phrase that embodies your philosophical quest...\"\r\n                  value={tagline}\r\n                  onChange={e => setTagline(e.target.value)}\r\n                  required\r\n                />\r\n                <small className=\"helper-text\">Written on papyrus scroll, your guiding principle</small>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Secret Phrase</label>\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"Guard your wisdom with a sacred seal...\"\r\n                  value={password}\r\n                  onChange={handlePasswordChange}\r\n                  required\r\n                  minLength={8}\r\n                  maxLength={128}\r\n                  aria-describedby=\"password-requirements\"\r\n                />\r\n                {passwordStrength && (\r\n                  <div className={`password-strength ${passwordStrength}`}>\r\n                    <div className=\"strength-bar\"></div>\r\n                    <span className=\"strength-text\">\r\n                      {passwordStrength === 'weak' && '⚠️ Weak Seal - Requirements not met'}\r\n                      {passwordStrength === 'medium' && '✓ Secure Seal - Good protection'}\r\n                      {passwordStrength === 'strong' && '✓✓ Unbreakable Seal - Excellent!'}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n                <small id=\"password-requirements\" className=\"helper-text\">\r\n                  Must be 8+ characters with uppercase, lowercase, number, and special character\r\n                </small>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Philosophical Stance</label>\r\n                <select \r\n                  value={belief} \r\n                  onChange={e => setBelief(e.target.value)}\r\n                  required\r\n                >\r\n                  <option value=\"\">Choose your initial compass...</option>\r\n                  <option value=\"Stoic\">🏛️ Stoic — Master of Self</option>\r\n                  <option value=\"Epicurean\">🌿 Epicurean — Seeker of Tranquility</option>\r\n                  <option value=\"Skeptic\">🔍 Skeptic — Questioner of Truth</option>\r\n                  <option value=\"Platonist\">✨ Platonist — Believer in Forms</option>\r\n                  <option value=\"Aristotelian\">📖 Aristotelian — Empirical Thinker</option>\r\n                  <option value=\"Cynic\">⚡ Cynic — Challenger of Convention</option>\r\n                  <option value=\"Agnostic\">❓ Agnostic — Open Seeker</option>\r\n                  <option value=\"Existentialist\">🎭 Existentialist — Creator of Meaning</option>\r\n                </select>\r\n                <small className=\"helper-text\">Your compass in philosophical waters (can evolve)</small>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Guiding Virtue</label>\r\n                <select \r\n                  value={virtue} \r\n                  onChange={e => setVirtue(e.target.value)}\r\n                  required\r\n                >\r\n                  <option value=\"\">Select your cardinal virtue...</option>\r\n                  <option value=\"Wisdom\">🦉 Wisdom (Σοφία) — Knowledge & Understanding</option>\r\n                  <option value=\"Courage\">⚔️ Courage (Ανδρεία) — Moral Bravery</option>\r\n                  <option value=\"Temperance\">⚖️ Temperance (Σωφροσύνη) — Self-Mastery</option>\r\n                  <option value=\"Justice\">⚖️ Justice (Δικαιοσύνη) — Fairness & Honor</option>\r\n                </select>\r\n                <small className=\"helper-text\">The virtue that guides your path in the Agora</small>\r\n              </div>\r\n\r\n              {/* Philosopher's Oath */}\r\n              <div className=\"oath-container\">\r\n                <label className=\"oath-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    className=\"oath-checkbox\"\r\n                    checked={oathAccepted}\r\n                    onChange={e => setOathAccepted(e.target.checked)}\r\n                    required\r\n                  />\r\n                  <div className=\"oath-text\">\r\n                    I vow to speak with clarity, listen with humility, and sculpt my beliefs with reason. \r\n                    I shall honor the sacred exchange of ideas and uphold the dignity of discourse in this eternal Agora.\r\n                  </div>\r\n                </label>\r\n              </div>\r\n\r\n              <button type=\"submit\" className=\"submit-btn\" disabled={loading || !oathAccepted}>\r\n                {loading ? 'Consulting Oracle...' : 'Ignite Your Journey'}\r\n              </button>\r\n\r\n              <div className=\"register-footer\">\r\n                <p className=\"footer-link\">\r\n                  Already Initiated? <a href=\"/login\">Enter the Threshold</a>\r\n                </p>\r\n                <p className=\"footer-link\">\r\n                  <a href=\"/\">← Return to Agora Gates</a>\r\n                </p>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n"],"names":["username","setUsername","useState","tagline","setTagline","password","setPassword","belief","setBelief","virtue","setVirtue","oathAccepted","setOathAccepted","loading","setLoading","toast","setToast","generatedId","setGeneratedId","passwordStrength","setPasswordStrength","navigate","useNavigate","_jsxs","_Fragment","children","_jsx","Loading","message","Toast","type","onClose","className","title","onClick","copyToClipboard","text","navigator","clipboard","writeText","onSubmit","async","e","preventDefault","res","fetch","concat","config","API_URL","method","headers","body","JSON","stringify","data","json","ok","userId","localStorage","setItem","setTimeout","state","error","placeholder","value","onChange","target","required","minLength","pass","length","criteriaMet","test","filter","Boolean","checkPasswordStrength","maxLength","id","checked","disabled","href"],"sourceRoot":""}