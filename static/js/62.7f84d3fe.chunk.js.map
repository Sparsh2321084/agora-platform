{"version":3,"file":"static/js/62.7f84d3fe.chunk.js","mappings":"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","sources":["Notifications.js"],"sourcesContent":["import React, { memo, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { motion } from 'framer-motion';\r\nimport config from './config';\r\nimport './Notifications.css';\r\n\r\n/**\r\n * NOTIFICATIONS PAGE - Activity Feed\r\n * Performance: Virtual scrolling for thousands of notifications\r\n * Uses IndexedDB for offline caching\r\n */\r\n\r\nconst Notifications = memo(() => {\r\n  const navigate = useNavigate();\r\n  const [user] = useState(() => JSON.parse(localStorage.getItem('agoraUser') || 'null'));\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [filter, setFilter] = useState('all'); // all, reply, mention, discussion\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    const fetchNotifications = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const response = await fetch(`${config.API_URL}/notifications/${user.userId}?limit=50`);\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch notifications');\r\n        }\r\n\r\n        const data = await response.json();\r\n        setNotifications(data.notifications || []);\r\n      } catch (err) {\r\n        console.error('Notification fetch error:', err);\r\n        setError('Failed to load notifications. Please try again.');\r\n        setNotifications([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchNotifications();\r\n  }, [user, navigate]);\r\n\r\n  const filteredNotifications = notifications.filter(notif => {\r\n    if (filter === 'all') return true;\r\n    return notif.type === filter;\r\n  });\r\n\r\n  const markAsRead = async (id) => {\r\n    try {\r\n      await fetch(`${config.API_URL}/notifications/${id}/read`, {\r\n        method: 'PUT'\r\n      });\r\n      \r\n      setNotifications(prev =>\r\n        prev.map(notif => notif.id === id ? { ...notif, is_read: true } : notif)\r\n      );\r\n    } catch (err) {\r\n      console.error('Error marking notification as read:', err);\r\n    }\r\n  };\r\n\r\n  const markAllAsRead = async () => {\r\n    if (!user) return;\r\n    \r\n    try {\r\n      await fetch(`${config.API_URL}/notifications/${user.userId}/read-all`, {\r\n        method: 'PUT'\r\n      });\r\n      \r\n      setNotifications(prev => prev.map(notif => ({ ...notif, is_read: true })));\r\n    } catch (err) {\r\n      console.error('Error marking all as read:', err);\r\n    }\r\n  };  const handleLogout = () => {\r\n    localStorage.removeItem('user');\r\n    navigate('/');\r\n  };\r\n\r\n  if (!user) return null;\r\n\r\n  const getNotificationIcon = (type) => {\r\n    switch (type) {\r\n      case 'reply': return '💬';\r\n      case 'mention': return '👤';\r\n      case 'discussion': return '🏛️';\r\n      default: return '📢';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      exit={{ opacity: 0 }}\r\n      className=\"notifications-page\"\r\n    >\r\n      {/* Navigation */}\r\n      {/* Content */}\r\n      <div className=\"notifications-container container-golden\">\r\n        <div className=\"notifications-header\">\r\n          <h1 className=\"notifications-title text-epigraphic\">\r\n            🔔 Notifications\r\n            <span className=\"title-greek\">Ειδοποιήσεις</span>\r\n          </h1>\r\n          \r\n          {notifications.some(n => !n.is_read) && (\r\n            <button className=\"mark-read-btn\" onClick={markAllAsRead}>\r\n              Mark all as read\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <div className=\"notifications-filters\">\r\n          <button\r\n            className={`filter-btn ${filter === 'all' ? 'active' : ''}`}\r\n            onClick={() => setFilter('all')}\r\n          >\r\n            All\r\n          </button>\r\n          <button\r\n            className={`filter-btn ${filter === 'reply' ? 'active' : ''}`}\r\n            onClick={() => setFilter('reply')}\r\n          >\r\n            💬 Replies\r\n          </button>\r\n          <button\r\n            className={`filter-btn ${filter === 'mention' ? 'active' : ''}`}\r\n            onClick={() => setFilter('mention')}\r\n          >\r\n            👤 Mentions\r\n          </button>\r\n          <button\r\n            className={`filter-btn ${filter === 'discussion' ? 'active' : ''}`}\r\n            onClick={() => setFilter('discussion')}\r\n          >\r\n            🏛️ Discussions\r\n          </button>\r\n        </div>\r\n\r\n        {/* Notifications List */}\r\n        <div className=\"notifications-list\">\r\n          {loading ? (\r\n            <div className=\"loading-state\">Loading notifications...</div>\r\n          ) : error ? (\r\n            <div className=\"error-state\">\r\n              <span className=\"error-icon\">⚠️</span>\r\n              <p>{error}</p>\r\n            </div>\r\n          ) : filteredNotifications.length === 0 ? (\r\n            <div className=\"empty-state\">\r\n              <span className=\"empty-icon\">📭</span>\r\n              <p>No notifications yet</p>\r\n              <button className=\"cta-btn\" onClick={() => navigate('/dashboard')}>\r\n                Start Exploring Discussions\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            filteredNotifications.map(notif => (\r\n              <motion.div\r\n                key={notif.id}\r\n                className={`notification-item ${!notif.is_read ? 'unread' : ''}`}\r\n                onClick={() => {\r\n                  markAsRead(notif.id);\r\n                  if (notif.link) navigate(notif.link);\r\n                }}\r\n                whileHover={{ x: 5 }}\r\n                transition={{ duration: 0.2 }}\r\n              >\r\n                <div className=\"notification-icon\">{getNotificationIcon(notif.type)}</div>\r\n                <div className=\"notification-content\">\r\n                  <p className=\"notification-title\">\r\n                    <strong>{notif.title}</strong>\r\n                  </p>\r\n                  <p className=\"notification-message\">\r\n                    {notif.message}\r\n                  </p>\r\n                  <span className=\"notification-time\">\r\n                    {new Date(notif.created_at).toLocaleString()}\r\n                  </span>\r\n                </div>\r\n                {!notif.is_read && <span className=\"unread-dot\"></span>}\r\n              </motion.div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\nNotifications.displayName = 'Notifications';\r\n\r\nexport default Notifications;\r\n"],"names":["Notifications","memo","navigate","useNavigate","user","useState","JSON","parse","localStorage","getItem","notifications","setNotifications","filter","setFilter","loading","setLoading","error","setError","useEffect","async","response","fetch","concat","config","API_URL","userId","ok","Error","data","json","err","console","fetchNotifications","filteredNotifications","notif","type","getNotificationIcon","_jsx","motion","div","initial","opacity","animate","exit","className","children","_jsxs","some","n","is_read","onClick","method","prev","map","_objectSpread","length","id","markAsRead","link","whileHover","x","transition","duration","title","message","Date","created_at","toLocaleString","displayName"],"sourceRoot":""}